#!/usr/bin/bash
# SPDX-License-Identifier: GPL-2.0-only
#
# build-fpbx-installer-iso
#
# Copyright (C) 2024-2025, Sangoma US Inc.
#
# Authors:
#	Chris Maj <cmaj+fpbx17iso@sangoma.com>
#	Duncan Patterson <dpatterson+fpbx17iso@sangoma.com>
#	Mallavolu Purna Sai <spurna+fpbx17iso@sangoma.com>
#	Pushkar Singh <psingh+fpbx17iso@sangoma.com>
#
#	Includes many ideas from earlier first-boot.sh by Sirs Purna & Pushkar
#
# Purpose:
#	Use this script to generate ISOs that can be used
#	to rapidly install FreePBX onto a system, using a base
#	Debian ISO that gets grafted on to bit-by-bit.
#
# Example for public version ('PUB' spice):
#      $ bash build-fpbx-installer-iso debian-12.8.0-amd64-netinst.iso
#
# Example for warehouse version ('INT' spice):
#      $ bash build-fpbx-installer-iso debian-12.8.0-amd64-netinst.iso -s INT
#
# Example for existing customer equipment upgrade version ('UPG' spice):
#      $ bash build-fpbx-installer-iso debian-12.8.0-amd64-netinst.iso -s UPG
#
# Output:
# 	1. an ISO ready to write to a USB stick (required: USB stick size less than appx 120G)
# 	2. and (optionally) a PXE boot friendly TAR file for use in cobbler, di-netboot-assistant, etc.
#
# Prerequisites:
#	1. xorriso ISO image tool
#		$ apt-get install xorriso
#	2a. An upstream Debian GNU/Linux ISO such as netinst:
#		$ wget https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-12.8.0-amd64-netinst.iso
#	2b. Or use a DVD image for faster installs with more hardware drivers:
#		$ apt-get install jigdo-file
#		$ jigdo-lite https://cdimage.debian.org/debian-cd/current/amd64/jigdo-dvd/debian-12.8.0-amd64-DVD-1.jigdo
#
# Caveats:
# 	1. Debian 12 "bookworm" was used to develop, test and run this script; but it might work on others.
# 	2. Specify a "-s <spice_name>" of "-s OSO" to install with the "--opensourceonly" option on non-DAHDI systems.
# 	   (Some non-free firmware may still be installed but the FreePBX install should remove its commercial modules.)
# 	3. The "initrd.gz" is only required for non-Debian PXE boot servers eg. cobbler on CentOS 7, Fedora 41, Rocky 9, etc.:
#		$ wget -O bookworm-netboot-initrd.gz https://ftp.debian.org/debian/dists/stable/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz
#	4. Proper RAID support on UEFI boots only. (Any time there are two non-NVM drives you'll get a RAID setup.)
#	5. Minimum disk size when virtual is appx 30G without further adjustments to script defaults eg. see int_lvm_guided_size
#	6. Minimum disk size when physical via USB install is appx 120G as less than that is treated as a USB stick.
#
# WARNINGS:
#	1. To increase safety, spice defaults to 'PUB'.
#	2. PLEASE BE CAREFUL WITH "-s INT" - ONLY FOR WAREHOUSE BUILDS!
#	3. This ISO strives for Fully Automated Installation (FAI)
#	   and you will lose all existing data on any system you boot with it.
#
# TODOs:
#	- use "install" instead of "cp" for things
#	- remove cruft from /var/tmp/ in the sng-eol script (such as leftover systemd temp directories)
#	- check if the biosgrub is needed anymore in the partitioning
#	- reduce number of ors to true - errors should be handled better for each command with a notice in the installer log
#	- crypto at rest version (safer version + LUKS encrypted hard drive with keys on unique USB drive)
#	- delete packages from ISO that are not used during initial installation (removed gnome/kde but more needed)
#	- include packages that the shell script installer downloads (some duplicates but archives.tar is pretty good)
#	- check if archives is actually any faster...
#	- simple-cdd (*might* be easier than all the xorriso usage)
#	- the bool_automatic toggle set to false is not very step-by-step yet
#	- make int_mb_ssd_wear a percentage so it dynamically changes based on disk size
#	- partition mounting improvements (several TODOs there)
#	- genericize the disk types (s, v, xv -> one)
#	- nvm "disks" like the UC25 do not show up in the preseed chooser but later on
#	- consider moving FreePBX apt key to external file as an optional include
#	- perhaps a proper jigdo of the utilized deb packages instead of archive.tar method
#	- use preseed_fetch instead of tftp (probably needed for cloud if it will be http instead of tftp)
#	- consider console=hvc0 in the cloud
#	- 3rd partition that gets blkdiscard'ed may need to be at end of disk to reclaim space
#	- GRUB serial no go on reboot (needs Debian template modifation in /etc/grub/ ...)
#	- consider copyright notice at bottom of GRUB wallpaper like SNG7 did

# FreePBX version
str_freepbx_version="17"

# Our name
str_vendor="Sangoma"
str_vendor_url="https://www.sangoma.com/"
str_our_full_name="Sangoma FreePBX Distro"
str_our_short_cap_name="SNGFD"

# Support Debian 12 bookworm
str_deb_codename="bookworm"
str_deb_version=12

# Script versioning
str_script_minor="0.4-BETA"
str_script_build="2025-01-28.1"

# Computed values
str_script_codename=${str_deb_codename}
str_script_major=${str_deb_version}
str_script_version="${str_script_major}.${str_script_minor}"
str_script_version_underscore=$(echo $str_script_version | sed -e 's/\./_/g' -e 's/-/_/g')
str_script_version_hyphen=$(echo $str_script_version | sed -e 's/\./-/g')
str_script_name=$(basename $0)
str_script_sha512sum=$(sha512sum $0)

# Computed first part of the name of the output iso file
str_iso_out_base="${str_our_short_cap_name}-${str_script_version_hyphen}"

# Now some variables that might get overwritten by command line options...

# Our DAHDI build is sticky about kernel versions
#str_locked_kernel="6.1.0-25-amd64" ; # works with Debian 12.7
#str_locked_kernel="6.1.0-26-amd64" ; # works with Debian 12.8 and 12.9
str_locked_kernel="iso" ; # use whatever the input ISO supplies
# str_locked_kernel="" ; # float to current Debian eg. OSO spice

# Hostname of the installed system varies by version
str_host_name="sangoma-freepbx-${str_script_version_hyphen,,}"
#str_timezone="US/Mountain"
str_timezone="UTC"

# Script was developed for internal use, primarily fast PXE boot,
# so make it safer for the public ISOs.
str_spice="PUB"

# If anything but these are changed:
# a) input ISO (-i)
# b) spice level (-s)
# c) netboot initrd (-n)
# d) archives (-a)
# ...then we add the word DIY to the ISO output name
bool_diy=false
str_diy=""

# Warehouse ships out DAHDI compatible appliances
# but default to empty - see spice selection below
str_sng_opts=""

# You can change your username
str_whoami="sangoma"

# GRUB wallpaper (if not in this directory, then supply path to it)
fn_wallpaper="sangoma-tango-tiny-kit-background-for-grub.png"
# no wallpaper :(
#fn_wallpaper=""

# Special UEFI RAID sync script to keep booting from primary & secondary.
fn_efi_raid_sync="copy_to_boot_efi2.j2"

# Disabling networking is good for testing or clean room installs,
# but you won't get very far until network is connected,
# until we include more packages in the ISO
bool_networking=true

# Proxy settings for caching packages on another machine on the LAN
# on that machine, run:
# $ apt-get install apt-cacher-ng
# $ ufw allow tcp/3142  ; or whatever else you need to open firewall
# ...this should greatly speed up non-DVD installs
bool_proxying=false
str_proxy_host=""
int_proxy_port=3142

# Pause before reboot when testing (good for reviewing in a shell)
bool_pause_reboot=false

# Start running the installer on first reboot via systemd oneshot service
bool_one_shot=true

# Percent of the Volume Group to fill up with Logical Volumes
# set to 100 to fill the VG ie. no user adjustable LV changes later
# eg. on 100G disk, with int_lvm_guided_size=90, and int_mb_ssd_wear=1,
# then partman will fill 90G, leaving almost 9G open (some room for boot partition)
# MINIMUM DISK SIZE IS APPX 15G
# BUT if you specify int_lvm_guided_size=50 on 20G disk that WILL NOT WORK
# (try int_lvm_guided_size=90 on a 20G disk :-)
int_lvm_guided_size=50

# MegaBytes for SSD wear (used in partman sngssdwear - 3rd disk partition)
# this allows Over Provisioning of the disk, which will improve disk lifetime
# set this to 1 to fill up 99.9% of disk (not recommended but here you go ;-)
# NOTE this works on RAID, and on single disks if GPT partitioned,
# but some (most?) VMs do not use GPT partitioning on their virtual disks.
# TODO: determine if this is better at the end of the disk not in 3rd part
# Minimum: 1
int_mb_ssd_wear=25025

# MegaBytes for swap
# minimium swap amount
int_mb_swap_min=100
# maximum (will be smaller on disks under 100G)
int_mb_swap_max=4096
# warehouse starting in 2025
int_mb_swap_warehouse=8192
# upgrades of existing customer equipment
int_mb_swap_existing=4096

# If testing step-by-step, then set bool_automatic to false
bool_automatic=true

# bool_fully_automated_installation controls whether we bury installer
# in GRUB/PXELINUX menu or not, allowing perhaps too easy disk wiping;
# probably set this to true for pxeboot in warehouse, and maybe internal USB,
# but set to false for distributing on thumb drives elsewhere (especially publicly).
bool_fully_automated_installation=false

# New autogenerated passwords will be this many bytes.
# If 0, then no pseudo-random passwords will be generated.
# Note that if no str_spice set (default is 'PUB') or str_spice is 'OSO'
# then this is set to a number (12) further below.
int_new_pass_length=0

# Hopefully we will stop using these old passwords soon.
str_old_root_pass="sangoma"
str_old_user_pass="SangomaDefaultPassword"

# Set to true to lock the root user during the ISO installation.
bool_lock_root_early=true
# Set to true to lock the root user during the sng-eol script run (before shipping.)
bool_lock_root_eol=true

# Used in the packages list (copied from FreePBX shell installer).
str_php_version=8.2

# Sangoma deb repo mirror priority (copied from the shell installer).
int_mirror_priority=600

# If bool_embed_apt_key=false then no fpbx repo setup/preloading will
# occur during ISO installation -- we will wait for the script.
# If bool_networking=false then bool_embed_apt_key has no effect.
bool_embed_apt_key=false

# Locate of deb package archives from another working FreePBX17
# that you rysnc'd to this installation box and want to embed in the ISO.
# eg. rsync -avz goodpbx17:/var/cache/apt/archives .
dir_archives=""				; # no default
#dir_archives="archives"		; # use local directory
#dir_archives="/var/cache/apt/archives" ; # use current machine as the source

# Sensible default
fn_netboot_initrd=""

usage() {
	echo "
Usage: $0 -i debian_input.iso (example 'debian-12.8.0-amd64-netinst.iso')

Optional:
	-a 'a'rchives directory of Debian packages to embed in ISO eg. rsync -avz goodpbx17:/var/cache/apt/archives .
	-c <filename> EFI RAID syn'c' template - extra hooks to allow failover booting should a disk go down (default '${fn_efi_raid_sync}')
	-e 'e'mbed apt key from this file for the FreePBX package repository (default '${bool_embed_apt_key}')
	-f <integer> 'f'ixed swap memory (in MB) - default is in a range from '${int_mb_swap_min}' to '${int_mb_swap_max}' that varies with disk size
	             (except with '-s INT' it is fixed to '${int_mb_swap_warehouse}' and with '-s UPG' it is fixed to '${int_mb_swap_existing}')
	-g <integer> 'g'enerated password length - -1 to prompt user, 0 to use static passwords the OLD way, >0 to generate (default '${int_new_pass_length}')
	-h <string> 'h'ost name to set (default '${str_host_name}')
	-k <string> 'k'ernel version to lock on - mostly for DAHDI - specify 'iso' to lock to input iso (default '${str_locked_kernel}')
	-m <integer> 'm'b (in MB) of empty disk space - used for SSD wear-leveling - minimum 1 (default '${int_mb_ssd_wear}')
	-n <filename> 'n'etboot initrd.gz to use - for PXE boots (default '${fn_netboot_initrd}' except with '-s INT' it is '${str_script_codename}-netboot-initrd.gz')
	-ph <string> 'p'roxy 'h'ost for apt - for caching Debian packages - setting this will activate proxying (default '${str_proxy_host}')
	-pp <integer> 'p'roxy 'p'ort for apt - for caching Debian packages (default '${int_proxy_port}')
	-r 'r'eboot paused at end of installation - lets you take a look at internals (default '${bool_pause_reboot}')
	-s <string> 's'pice - AST, CLN, DEV, FOG, INT, OSO, PUB, TST, UPG - overrides conflicting options (default '${str_spice}')
	-t <string> 't'imezone (default '${str_time_zone}')
	-u <string> 'u'sername - will have sudo as root is disabled (default '${str_whoami}')
	-w <filename> 'w'allpaper - background image to use for the GRUB splash screen (default '${fn_wallpaper}')
" 1>&2; exit 1; }

while getopts ":a:c:e:f:g:h:i:k:m:n:ph:pp:r:s:t:u:w:" opt; do
	case "${opt}" in
		a)
			dir_archives=${OPTARG}
			;;
		c)
			bool_diy=true
			fn_efi_raid_sync=${OPTARG}
			;;
		e)
			bool_diy=true
			bool_embed_apt_key=true
			;;
		f)
			bool_diy=true
			int_mb_swap_min=${OPTARG}
			int_mb_swap_max=${OPTARG}
			;;
		g)
			bool_diy=true
			int_new_pass_length=${OPTARG}
			;;
		h)
			bool_diy=true
			str_host_name=${OPTARG}
			;;
		i)
			fn_iso_input=${OPTARG}
			;;
		k)
			bool_diy=true
			str_locked_kernel=${OPTARG}
			;;
		m)
			bool_diy=true
			int_mb_ssd_wear=${OPTARG}
			;;
		n)
			fn_netboot_initrd=${OPTARG}
			;;
		ph)
			bool_diy=true
			bool_proxying=true
			str_proxy_host=${OPTARG}
			;;
		pp)
			bool_diy=true
			int_proxy_port=${OPTARG}
			;;
		r)
			bool_diy=true
			bool_pause_reboot=true
			;;
		s)
			str_spice=${OPTARG}
			;;
		t)
			bool_diy=true
			str_time_zone=${OPTARG}
			;;
		u)
			bool_diy=true
			str_whoami=${OPTARG}
			;;
		w)
			bool_diy=true
			fn_wallpaper=${OPTARG}
			;;
		*)
			usage
			;;
	esac
done
shift $((OPTIND-1))

if [ -z "${fn_iso_input}" ]; then
	usage
fi

# lots of opinions on the spice level
case "${str_spice}" in
	AST)
		# ASTerisk is the GOAT 
		int_new_pass_length=-1
		str_sng_opts="--dahdi --nofreepbx"
		;;
	CLN)
		# CLeaN room / off-line setups
		bool_networking=false
		bool_pause_reboot=true
		;;
	DEV)
		# DEVeloper friendly
		bool_automatic=false
		int_new_pass_length=-1
		bool_pause_reboot=true
		str_sng_opts="--dahdi --dev"
		;;
	FOG)
		# FOGgy clouds
		int_mb_ssd_wear=1
		int_new_pass_length=0
		;;
	INT)
		# INTernal
		bool_fully_automated_installation=true
		str_sng_opts="--dahdi"
		int_mb_swap_min=${int_mb_swap_warehouse}
		int_mb_swap_max=${int_mb_swap_warehouse}
		echo "Internal warehouse BE CAREFUL!"
		sleep 1
		echo "Internal warehouse BE CAREFUL!"
		sleep 1
		echo "Internal warehouse BE CAREFUL!"
		sleep 2
		;;
	OSO)
		# Open Source Only (well, as much as possible)
		str_locked_kernel=""
		int_new_pass_length=12
		str_sng_opts="--opensourceonly"
		;;
	PUB)
		# PUBlic for the world
		int_new_pass_length=12
		str_sng_opts="--dahdi"
		;;
	TST)
		# TeSTing
		bool_pause_reboot=true
		str_sng_opts="--dahdi --testing"
		;;
	UPG)
		# UPGrades for existing hardware in the wild
		int_new_pass_length=-1
		str_sng_opts="--dahdi"
		int_mb_swap_min=${int_mb_swap_existing}
		int_mb_swap_max=${int_mb_swap_existing}
		;;
	*)
		usage
		;;
esac

# double check the internal build has a PXE boot ready initrd
if [ "${str_spice}" = "INT" ] && [ -z "${fn_netboot_initrd}" ]; then
	fn_netboot_initrd="${str_script_codename}-netboot-initrd.gz"
	if ! [ -f "${fn_netboot_initrd}" ]; then
		echo ""
		echo "ERROR: No initrd.gz (-n) supplied for an INTernal warehouse build"
		echo "       and could not find '${fn_netboot_initrd}' in your current directory."
		echo "       This is almost certainly not what you want."
		echo "       Try: wget -O ${str_script_codename}-netboot-initrd.gz https://ftp.debian.org/debian/dists/stable/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz"
		sleep 5
		usage
	fi
fi

# maybe prompt for passwords
if [ $int_new_pass_length -eq -1 ]; then
	str_old_user_pass=""
	str_old_root_pass=""
fi

# make life easier with partman
if [ $int_mb_ssd_wear -le 0 ]; then
	int_mb_ssd_wear=1
fi

# final ISO output filename
if $bool_diy; then
	fn_iso_output=${str_iso_out_base}-${str_spice}-DIY.iso
	str_diy="_DIY"
else
	fn_iso_output=${str_iso_out_base}-${str_spice}.iso
fi

# ready for the MITER numbering
cpeid="cpe:2.3:o:${str_vendor,,}:${str_our_short_cap_name,,}:${str_freepbx_version,,}:${str_script_version,,}:${str_spice,,}:*:*:*:*:*"

# The freepbx.gpg public key for signed deb package verification
# Refresh from https://deb.freepbx.org/gpg/aptly-pubkey.asc
str_fpbx_pubkey="-----BEGIN PGP PUBLIC KEY BLOCK-----

mQINBGXcuqkBEADFdMz3Zl2aiYMQKDrONXxWm+Xq/2joOvYWuXZf8xWQaT4uOZfV
P259MvxC8HYeDdsE3Yt3jzD8nVWZhcE8x2C6VW+ATDmLlUD7aVTqnfAlW+XzaS6b
gc5byV6vrORp5GWZvGeJBxDAI/OY4IW9OZvClazfZRiEjMlJnme4NHsxy/4fanTo
fI4elK73Bq3qvcbzpiTQbt++NVz+iyyE7YzLX0EGUGUTFmsVHhIo0IsBBSZN2pUN
7t9HL/yfMUMbEJTZzsguyxve/1w005KMm59GwCmN1wNRRwssCoTpdfoHmQOCySxX
LbZvjGk5StXfOdnflomfMc03zjJN8qge2tJV8Ir8qqnk0FsfoPjWBIu3tC+jhXMf
b1Uikw1M1Kx/u/m4WclDO40rFDJnoZu/nJvqajsT2ZEbwVQ6x4fIIUxPOtPYWLbM
/Cs6Ck70qvKmxFuCPKrTmq741XxdtxBsC0kqILtvDxx3uXLPBumipKPsbZKwgm7z
reoo2rPNwDIYRcejRFDFx430JxWiBTAFJQ5vUMMTFdqhW8PDGnT7BiQUmDvuIYrh
EdG5lHbWTiLNP2qjxzB91KvppJ6EENGj9FxkOgjRI02dKVFDNEpDqBRuT319l78a
hm0ITbib7S6TSI381exUadc3Abjgg7Yq97OSeKoirO2wzcmpLcQKinYXTQARAQAB
tBlBcHRseSA8YXB0bHlAc2FuZ29tYS5jb20+iQJUBBMBCgA+FiEEmRw1fIo1nQOC
vG6HxN/mj85t4YYFAmXcuqkCGwMFCQPCZwAFCwkIBwIGFQoJCAsCBBYCAwECHgEC
F4AACgkQxN/mj85t4YZoIhAAgg3laxCKb72zNQcfHk7VTX/OBgvXLx0gIUCxw9mJ
LA6nBXjqPLv77k/VCcweJTZlMfdxk3Sv3b+tcRs58AJ11lm7q2fYm+ETHPQH1sk/
KKaKWy1LjVg+rqzqTLMJummNoSKyzcnIa/yDqzmW5AIWnYaVEb+1OT1TBrozbJLI
ZcKI0IZZ92nzrAPtQqT4huC9Y7sVtSnp3EA0L7jh8kYkfPbYxvtRrH66aM87b/yI
N9pVWr171vP6NTBQSXJOcmDQ5LprItIFtyfpzvqMFejBvLH3OrqcHvPewny12KQL
VQgiiX2ShF1eHe21OlTj2861CJ/0UFQkOjl7h2gbieTftOu6JHMrTskzM7DuPKDX
oyeXCFFclo0nJbJfZbG9R42rnmvBz/DDv+9LU9b667g7kkQHuL/Y5qV520iv1Cr9
FAsZepiiioFxWu7rNBH+HILa9jZWw9a34teaijzSO0rpjczrMZSuHA6hEzK81XJv
Yt17sW7VLM9DKnD1HcFZwfisLzrNtAnNsCELuePd9XIz4qkl1SjvNKNNDWAe3bv8
TgvAPLAk/utGbcN471dX+4WU4szFuuJ3gI6/RXf4Qb347yEdMzwzozekfkJ6I7V3
J//N/9lmuWUTwNBOndHvZtukYY8zjJMMA4RCyJ1oBRWS2OfxS7Z8OE18pFFnU3lW
fD65Ag0EZdy6qQEQAOgzGamKNtEi6mo60HgXJWxzpK04GW2LMakP6FyK8tGhc7/7
Z5BFwKNUbSFQiVKsqcdgse4R6U86gWHUik8QKDe74UbEnb/10Fhjzx3DoApDCD1l
Hei2zFiPH8UQUyBhmIlmoyJJQ0hS6ZrMNFj0Oxl5RmQ7uaVBRAKXas+QVqX7Qdvi
RbyS/8u88OozGLatoSdgg3frJu6dinKARXVxIKBwxPLQPUWgsVoSVI60uaIhr8BW
4VYUNIoR7eWGvWyFxCBGBS5ot29aoyoEX/BG/1cAbfNfuYEZV8RcDiteYhiL9JPL
slRKm7O8U+p2aO8t+xPCptXo+cGCqnJBrUAVroID0FRoPLxrqt7Jxrq1ktxGigHH
tSgECdC8vZB0pbXrF/0zXnG2HXnO8z3IVY+zwDr3LrNWr8HH1AZbNp1Vd97wSm9B
m6J4kKeGN09Jo6HxJ/jJgTiNz5fy+xrvaEOnC8+mY7weszejTM0IikCQ/h7sOUk3
icUeHrxJCI3vTkWiEdadw5yl4OCQlnjgpow18i43ut6r4DHO9r0j6bJkyQ2xZgGc
re/V4t9mha9FOdFUgXI2OvCgKEQG08shOWIvtiqqIUrje6yobK004b//kwPcp2Ag
mlq59Zjot4bdHYP5ruumTtYX6ew5CWuwjK/IdfFz/R6MvAw5QUfBP2aThrR5ABEB
AAGJAjwEGAEKACYWIQSZHDV8ijWdA4K8bofE3+aPzm3hhgUCZdy6qQIbDAUJA8Jn
AAAKCRDE3+aPzm3hhvsjD/4t4jdA3x+0ZJfwUWTZuABtC5ddmkqdv6BB+ZQ54QMF
o6RyoEBsTYl/8mwaWtooe3UAj8LV/Zi9S87bWMt6VXmNOHqgJDvoS45Mg4Swg4lg
TLcmR/IJw6Gn4vb+4GMz0RU7QDLPKsHlyYzT05T3ERVgN3N3YN+NGl/WkV19+i2r
K/f/Y6x6gvFS5PM/O+B8y+oSp1AKAVOOyVETEtoF7Wwsn97HC28LytFB4bR+HPP2
P7U8QywKhNFwOjFNGqpoX3fjAmYQ6Xos02G1MossDqsmClYNtzaRT0rlgyeRwLvA
Os32PncIwVnF4HNIOuurVPE20KiWxaZazb/rRf3LOm7Am8nsjR6szkLobKegrhYd
rV2mmXZKAJEM7MRSrQpVPEuc0O4XpHNmFVYAQn2S6o6O0IUBmEcmH8ud+RHCeU5d
mLsjKtyCS4UEqlavNfjfZa8ZgsU4FUtgHswqVbnkpuwRPnXzTGOOJa0SpD6N93cX
r7vz9lcRyQFkacczGu15eRM6ohF/qqsVcnAZ43MHlYMvfweFdp5cPvMutwNBjK8u
JKuZ/MQjVUiPELTyiEx2ESGvYgOqKFSgM/xK07PMUoyCA8CO1O4s0N3HmUU6oPng
JpQsw7xxIG134RugiVbyZi7w/7DVjaZg2gCzyW6PcXcLV+hY2TMcMz+8avtEq9Jj
AA==
=0e0h
-----END PGP PUBLIC KEY BLOCK-----"

#
# that should be it for variables you need to change
# when moving from testing to production ISOs
#

# Multiple files are generated by this script so use a common header
str_header="\
########################################################
# THIS FILE WAS MADE BY THE  SANGOMA FREEPBX INSTALLER #
########################################################
#
# Check if this is Original Goods at https://FreePBX.com
#
# Date: $(date)
# Script Name: ${str_script_name}
# Script Build: ${str_script_build}
# Script Version: ${str_script_version}
# Script SHA512SUM: ${str_script_sha512sum}
# FreePBX Version: ${str_freepbx_version}
# Spiciness: ${str_spice}
# Debian input ISO: $(basename ${fn_iso_input})
# SFPBX output ISO: ${fn_iso_output}
# Others:
# - bool_embed_apt_key=${bool_embed_apt_key}
# - bool_diy=${bool_diy}
# - str_host_name=${str_host_name}
# - str_locked_kernel=${str_locked_kernel}
# - int_mb_ssd_wear=${int_mb_ssd_wear}
# - fn_netboot_initrd=$(basename ${fn_netboot_initrd})
# - int_new_pass_length=${int_new_pass_length}
# - bool_pause_reboot=${bool_pause_reboot}
# - str_sng_opts=${str_sng_opts}
# - str_timezone=${str_timezone}
# - fn_wallpaper=${fn_wallpaper}
# - str_whoami=${str_whoami}
#
# FFFF RR   EEEE EEEE PP  BB  X X
# FFF  RRR  EEE  EEE  PPP BBB  X
# F    R  R EEEE EEEE P   BB  X X
"

# good list of preseed options: https://preseed.debian.net/

# partition mount security notes:
# - mkinitramfs needs 200MB for scratch space in /var/tmp
# - mkinitramfs says to not mount /var/tmp with noexec option,
#   but it seems to work
# - TODO: look into tmpfs for /tmp and /var/tmp, at least on physical
# - TODO: look into symlink of /var/tmp to /tmp
# - TODO: should mount /tmp with noexec, but may break apt,
#   unless APT::ExtractTemplates::TempDir is set in apt.conf
#   to something besides /tmp, or, add in pre/post scripts
#   DPkg::Pre-Install-Pkgs {"mount -o remount,exec /tmp";};
#   DPkg::Post-Invoke {"mount -o remount /tmp";};
# - TODO: mount /usr read-only, include similar pre/post
#   DPkg::Pre-Install-Pkgs {"mount -o remount,rw /usr";};
#   DPkg::Post-Invoke {"mount -o remount /usr";};

# make a temporary working directory
# and prepare to put some files in it
dtmp=$(mktemp -d)
dcdrom=cdrom-fpbx${str_freepbx_version}-${str_script_version_hyphen}
mkdir $dtmp/$dcdrom
mkdir $dtmp/isolinux
# self-replicating MWAHAHA
cp -a $0 $dtmp/$dcdrom/$str_script_name
# these preseeds will get copied to each ISO,
# although they will not be used on each ISO,
# it just makes it easier to include them in
# the main preseed.cfg on the ISO
fpreseedng=$dtmp/$dcdrom/preseed_ng.cfg
fpreseedcrypto=$dtmp/$dcdrom/preseed_crypto.cfg
fpreseedraid=$dtmp/$dcdrom/preseed_raid.cfg
fpreseedraiddisks=$dtmp/$dcdrom/preseed_raid_disk_s.cfg
fpreseedraiddiskv=$dtmp/$dcdrom/preseed_raid_disk_v.cfg
fpreseedraiddiskxv=$dtmp/$dcdrom/preseed_raid_disk_xv.cfg
fpreseednonraiddisks=$dtmp/$dcdrom/preseed_nonraid_disk_s.cfg
fpreseednonraiddiskv=$dtmp/$dcdrom/preseed_nonraid_disk_v.cfg
fpreseednonraiddiskxv=$dtmp/$dcdrom/preseed_nonraid_disk_xv.cfg
# the preseedX.cfg will get mapped into preseed.cfg
# there is one unique preseed.cfg per ISO
# the last line of the preseed.cfg will include
# one of the above specialized preseeds, based on the ISO
fpreseed0=$dtmp/$dcdrom/preseed0.cfg
fpreseed1=$dtmp/$dcdrom/preseed1.cfg
fpreseed2=$dtmp/$dcdrom/preseed2.cfg
# new commands we generate in this file
fcmdpreseedchooser=$dtmp/$dcdrom/sng_preseed_chooser
fcmdearlypartman=$dtmp/$dcdrom/sng_partman_early_command
fcmdearly=$dtmp/$dcdrom/sng_early_command
fcmdlate=$dtmp/$dcdrom/sng_late_command
fcmdboot=$dtmp/$dcdrom/sng_boot_command
# attempt to put partman recipes in a separate file failed
frecipes=$dtmp/$dcdrom/sng_partman_recipes.bnf
# we need freepbx pubkey (see str_fpbx_pubkey string above)
fpubkey=$dtmp/$dcdrom/freepbx-sangoma-apt-repo-pubkey.asc
# things we rip off the input ISO and change a little
fmd5sumtxt=$dtmp/md5sum.txt
fisolinuxcfg=$dtmp/isolinux/isolinux.cfg
fisolinuxtxt=$dtmp/isolinux/txt.cfg
fisolinuxmenu=$dtmp/isolinux/menu.cfg
fisolinuxstd=$dtmp/isolinux/stdmenu.cfg
fgrubcfg=$dtmp/grub.cfg
ftmpgrubcfg=$dtmp/tmpgrub.cfg
fgrubtheme1=$dtmp/theme1
fdiskinfo=$dtmp/info
fdebreadmetxt=$dtmp/README.txt
fnewreadmetxt=$dtmp/$dcdrom/README.txt
fsngreadmewarning=$dtmp/$dcdrom/WARNING.txt
feula=$dtmp/$dcdrom/EULA.txt
fwallpaper=$dtmp/$dcdrom/sangoma-wallpaper-for-grub.png
fcopyefigrubhook=$dtmp/$dcdrom/copy_to_boot_efi2.j2
dlinuxdpkgs=$dtmp/linuxdpkgs
farchivestar=$dtmp/$dcdrom/archives.tar

# GRUB hook to keep UEFI RAID working when primary disk drops out
# only needed for RAID so fake it till we make it :-)
if [ -f $fn_efi_raid_sync ]; then
	cp -a $fn_efi_raid_sync $fcopyefigrubhook
else
	echo "#!/bin/bash" > $fcopyefigrubhook
	echo "exit 0" >> $fcopyefigrubhook
fi

# DAHDI requires specific kernels
if [ "${str_locked_kernel}" = "iso" ]; then
	# we (sometimes) assume the input ISO uses a kernel that DAHDI supports
	xorriso -osirrox on -indev $fn_iso_input -extract pool/main/l/linux-signed-amd64 $dlinuxdpkgs
	str_locked_kernel=$(ls $dlinuxdpkgs | grep -v "linux-image-amd64" | grep -m 1 "linux-image" | cut -f1 -d'_' | sed 's/linux-image-//')
fi

# nice GRUB wallpaper
if [ -f $fn_wallpaper ]; then
	cp -a $fn_wallpaper $fwallpaper
else
	touch $fwallpaper
fi

# copy out the pubkey
if $bool_embed_apt_key; then
	cat << EOFK > $fpubkey
${str_fpbx_pubkey}
EOFK
fi

# script that determines if additional preseed files will run
cat << EOFP > $fcmdpreseedchooser
#!/bin/sh
${str_header}
# too soon for logger, this line never appears in the log, bummer
logger -t sng "BEGIN PRESEED CHOOSER COMMAND"

raid=true

# TODO: nvm "disks" like the UC25 do not show up yet
# need to load mmc-modules earlier... or move the chooser around...
# until then dcount=0 on these small devices :-/
dtype=\$(list-devices disk | grep -e da\$ | cut -f3 -d/ | head -c 1)
dcount=\$(list-devices disk | grep -e da\$ -e db\$ | wc -l)

if [ \$dcount -le 1 ]; then
	raid=false
else
	for disk in \$(list-devices disk | grep -e da\$ -e db\$ | cut -f3 -d/); do
		size=\$(cat /sys/block/\${disk}/size)
		# TODO: compare sizes of disks and check within 5% diff for RAID
		# FreePBX 60 single disk size is 250069680 (120GB)
		# in lab, using a thumb drive at 16GB, and that appears as a disk
		if [ \$size -lt 213456789 ]; then
			raid=false
		fi
	done
fi

if \$raid; then
	if [ "\$dtype" = "v" ]; then
		echo "preseed_raid_disk_v.cfg"
	elif [ "\$dtype" = "x" ]; then
		echo "preseed_raid_disk_xv.cfg"
	else
		echo "preseed_raid_disk_s.cfg"
	fi
	echo "preseed_raid.cfg"
else
	if [ "\$dtype" = "v" ]; then
		echo "preseed_nonraid_disk_v.cfg"
	elif [ "\$dtype" = "x" ]; then
		echo "preseed_nonraid_disk_xv.cfg"
	else
		echo "preseed_nonraid_disk_s.cfg"
	fi
	echo "preseed_ng.cfg"
fi

logger -t sng "END PRESEED CHOOSER COMMAND"
EOFP

cat << EOFQ > $fcmdearlypartman
#!/bin/sh
${str_header}
# do not use echo when in debconf mode
logger -t sng "BEGIN EARLY PARTMAN COMMAND"

# get previous UEFI out of the way
# and don't trash the thumb drive
umount /media || true

# should not be necessary to turn off swap
swapoff -a

# drive destroyer
# 1. try to auto-assemble any lingering RAIDs
# 2. wipe LVM
# 3. stop RAID 
# 4. wipe partitions (to get the RAID superblocks)
# 5. wipe MBRs of the disks
# TODO: consider wipefs utility (if available in installer)

# hmm can we start the array without causing lots of problems ?
mdadm --assemble --scan || true
sync

pvremove -f -f -y /dev/md0 /dev/md1 /dev/md2 /dev/md3 /dev/md4 /dev/md5 || true
sync

for raid in 0 1 2 3 4 5; do
	mdadm --stop /dev/md\${raid} || true
done
sync

for disk in \$(list-devices disk | grep -e da\$ -e db\$ | cut -f3 -d/); do
	size=\$(cat /sys/block/\${disk}/size)
	# in lab, using a thumb drive at 16GB, and that appears as a disk
	# but we do not want to wipe the thumb drive, only the big disks
	if [ \$size -gt 213456789 ]; then
		for partition in \$(list-devices partition | grep \$disk); do
			mdadm --zero-superblock \$partition || true
			sync
			dd if=/dev/zero of=\$partition bs=1M count=100
			sync
		done
		dd if=/dev/zero of=/dev/\$disk bs=1M count=100
		sync
	fi
done
sync

/run/sngdiskpass || true

logger -t sng "END EARLY PARTMAN COMMAND"
EOFQ

cat << EOFT > $fcmdboot
#!/bin/sh
${str_header}
logger -t sng "BEGIN BOOT COMMAND"
# TODO: could parse additional GRUB command-line options here
# but it happens so early there is not much useful we can do
touch /tmp/in-the-boot-command.txt
logger -t sng "END BOOT COMMAND"
EOFT

cat << EOFY > $fcmdearly
#!/bin/sh
${str_header}
logger -t sng "BEGIN EARLY COMMAND"

# need more entropy
haveged 2>/dev/null

# get previous UEFI out of the way
# and don't trash the thumb drive
umount /media || true

# set up password splashing command to run at end of install
cat << EOFF > /usr/lib/finish-install.d/09sngsplashpass
#!/bin/sh
${str_header}
set -e
. /usr/share/debconf/confmodule
debconf-loadtemplate --merge sngsplashpass /run/sngsplashpass.template
. /run/sngsplashpass
EOFF

# the password message to splash as a substitution template
if $bool_lock_root_early; then

cat << EOFMNOROOT > /run/sngsplashpass.template
Template: sngsplashpass/subst
Type: note
Description: Please write down the passwords
 You should write these down in safe places if you want to login later.
 .
 ${str_whoami}: \\\${newpassuser}
 .
 Did you write down the unique system passwords ? Take a picture ?
 .
 Or, if you want to change the passwords right now in the 2nd console:
 .
 1. Press CTRL+ALT+F2  (TIP: get back this 1st console with CTRL+ALT+F1)
 .
 2. Type: chroot /target
 .
 3. passwd ${str_whoami}
 .
 4. CTRL+ALT+F1  (to get back to this 1st console and complete install)
EOFMNOROOT

else

cat << EOFMROOT > /run/sngsplashpass.template
Template: sngsplashpass/subst
Type: note
Description: Please write down the passwords
 You should write these down in safe places if you want to login later.
 .
 root: \\\${newpassroot}
 .
 ${str_whoami}: \\\${newpassuser}
 .
 Did you write down the unique system passwords ? Take a picture ?
 .
 Or, if you want to change the passwords right now in the 2nd console:
 .
 1. Press CTRL+ALT+F2  (TIP: get back this 1st console with CTRL+ALT+F1)
 .
 2. Type: chroot /target
 .
 3. passwd
 .
 4. passwd ${str_whoami}
 .
 5. CTRL+ALT+F1  (to get back to this 1st console and complete install)
EOFMROOT

fi

cat << EOFS > /run/sngsplashpass
#!/bin/sh
${str_header}
set -e

# generate the passwords and splash them with some buttons

# TODO: try /target/bin/shuf -n 4 /etc/dictionaries-common/words | tr "\'\n" "-"
newpassroot=\\\$(/target/bin/openssl rand -base64 ${int_new_pass_length} | tr 'O01Il/' '*?#@:-')
newpassuser=\\\$(/target/bin/openssl rand -base64 ${int_new_pass_length} | tr 'O01Il/' '*?#@:-')
/bin/in-target su -s /bin/sh -c "echo root:\\\$newpassroot | chpasswd"
/bin/in-target su -s /bin/sh -c "echo ${str_whoami}:\\\$newpassuser | chpasswd"

db_capb backup
db_get partman-crypto/passphrase
db_subst sngsplashpass/subst newpassroot "\\\$newpassroot"
db_subst sngsplashpass/subst newpassuser "\\\$newpassuser"
db_subst sngsplashpass/subst newpassdisk "\\\$RET"
db_input critical sngsplashpass/subst || true
if ! db_go ; then
	# abort
	db_progress STOP
	exit 10
fi
EOFS

cat << EOFH > /run/sngdiskpass
#!/bin/sh
${str_header}
set -e
. /usr/share/debconf/confmodule
logger -t sng sngdiskpass
newpassdisk=\\\$(haveged -n ${int_new_pass_length} -f - 2>/dev/null | base64 | tr 'O01Il/' '*?#@:-')
# TODO
db_set partman-crypto/passphrase "\\\$newpassdisk"
db_set partman-crypto/passphrase-again "\\\$newpassdisk"
EOFH

chmod 0444 /run/sngsplashpass.template
chmod 0555 /usr/lib/finish-install.d/09sngsplashpass
chmod 0555 /run/sngsplashpass
chmod 0555 /run/sngdiskpass

# TODO: DAHDI building with DKMS so we can automatically match kernel updates
# hmm too early
#in-target apt-mark hold linux-image-${str_locked_kernel}

logger -t sng "END EARLY COMMAND"
EOFY

# begin late command generic
cat << EOFL0 > $fcmdlate
#!/bin/sh -e
${str_header}
logger -t sng "BEGIN LATE COMMAND"
EOFL0

# networking late command parts
if $bool_networking; then
	cat << EOFL1 >> $fcmdlate
logger -t sng "BEGIN NETWORKING PARTS OF LATE COMMAND"

# check for networking
if ! ping -c 2 -w 5 -W 10 github.com >/dev/null 2>&1; then
	logger -t sng "NETWORKING ERROR PLEASE CHECK"
else

# download the FreePBX shell script installer
# (less typing for the warehouse :)
in-target wget -O /var/tmp/sng_freepbx_debian_install.sh https://github.com/FreePBX/sng_freepbx_debian_install/raw/master/sng_freepbx_debian_install.sh
in-target chmod +x /var/tmp/sng_freepbx_debian_install.sh

# installer cannot run in-target (chroot errors) so this fails
#in-target su -s /bin/sh -c "bash /var/tmp/sng_freepbx_debian_install.sh"
#in-target bash /var/tmp/sng_freepbx_debian_install.sh

# end check for networking
fi
logger -t sng "END NETWORKING PARTS OF LATE COMMAND"
EOFL1

if ! [ -d "${dir_archives}" ]; then
	# fake out xorriso map
	touch $farchivestar
else
	echo "Copying in archives... please wait a moment."
	tar c --exclude='./linux-image*' --exclude='./fonts*' -f $farchivestar -C "${dir_archives}" .
	cat << EOFLP >> $fcmdlate
logger -t sng "BEGIN FREEPBX ARCHIVE PRELOAD PART OF LATE COMMAND"
if ! [ -s /cdrom/archives.tar ]; then
	tftp -g -l /cdrom/archives.tar -r /$dcdrom/archives.tar \${tftphost}
	#preseed_fetch /$dcdrom/archives.tar /cdrom/archives.tar
fi
tar xkf /cdrom/archives.tar -C /target/var/cache/apt/archives
logger -t sng "END FREEPBX ARCHIVE PRELOAD PART OF LATE COMMAND"
EOFLP
fi

if $bool_embed_apt_key; then
	cat << EOFL2 >> $fcmdlate
logger -t sng "BEGIN FREEPBX APT REPO PART OF LATE COMMAND"

# check for networking
if ! ping -c 2 -w 5 -W 10 github.com >/dev/null 2>&1; then
	logger -t sng "NETWORKING ERROR PLEASE CHECK"
else

# TODO: check if upgrade without update will hold kernel version
in-target apt-get update || true 
in-target apt-get -y upgrade || true

# get the FreePBX apt repo pub key into place
# and install a bunch of extra packages to help speed up the installer

# TODO: can we just copy the contents into freepbx.asc instead of freepbx.gpg ?
# this would avoid the gpg binary need here,
# but would probably require modifying the fpbx shell installer
# (otherwise we might run into a conflicting .gpg .asc scenario, not sure...)

in-target \\
	apt-get \\
	-y \\
	install \\
	"gpg" \\
	"haveged" \\
	"software-properties-common"

cp /cdrom/freepbx-sangoma-apt-repo-pubkey.asc /target/var/tmp/freepbx.asc
in-target su -s /bin/sh -c "cat /var/tmp/freepbx.asc | gpg --dearmor --yes -o /etc/apt/trusted.gpg.d/freepbx.gpg"

# software-properties-common package contains add-apt-repository
in-target add-apt-repository -y -S "deb [ arch=amd64 ] http://deb.freepbx.org/freepbx17-prod ${str_script_codename} main"
# TODO: why is this twice in the installer ?
in-target add-apt-repository -y -S "deb [ arch=amd64 ] http://deb.freepbx.org/freepbx17-prod ${str_script_codename} main"

# pin the Sangoma mirrors
cat << EOFU > /target/etc/apt/preferences.d/99sangoma-fpbx-repository
Package: *
Pin: origin deb.freepbx.org
Pin-Priority: ${int_mirror_priority}
EOFU

# TODO: check if running installer upon first login causes reinstall
# install some extra packages
# this mirrors list of upstream packages from the installer
# this will make it faster for warehouse to run the installer
# NOTE: we skip some packages here from the big installer list
# in favor of pre-configuring with the installer later...
# - iptables-persistent
# - postfix
in-target \\
	apt-get \\
	-y \\
	--ignore-missing \\
	-o DPkg::Options::="--force-confnew" \\
	-o Dpkg::Options::="--force-overwrite" \\
	install \\
	"apache2" \\
	"apt-transport-https" \\
	"at" \\
	"autoconf" \\
	"automake" \\
	"avahi-daemon" \\
	"avahi-utils" \\
	"bison" \\
	"build-essential" \\
	"ca-certificates" \\
	"cron" \\
	"curl" \\
	"default-libmysqlclient-dev" \\
	"dpkg-dev" \\
	"easy-rsa" \\
	"fail2ban" \\
	"flex" \\
	"flite" \\
	"ghostscript" \\
	"git" \\
	"gnupg" \\
	"haproxy" \\
	"htop" \\
	"incron" \\
	"ipset" \\
	"iptables" \\
	"lame" \\
	"libasound2-dev" \\
	"libavahi-client3" \\
	"libavdevice-dev" \\
	"libbluetooth-dev" \\
	"libc-client2007e-dev" \\
	"libcurl4-openssl-dev" \\
	"libgmime-3.0-dev" \\
	"libical-dev" \\
	"libicu-dev" \\
	"libiksemel-dev" \\
	"libjansson-dev" \\
	"liblua5.2-dev" \\
	"libncurses5-dev" \\
	"libneon27-dev" \\
	"libnewt-dev" \\
	"libnss-mdns" \\
	"libogg-dev" \\
	"libpq-dev" \\
	"libpri-dev" \\
	"libresample1-dev" \\
	"libsnmp-dev" \\
	"libspandsp-dev" \\
	"libspeexdsp-dev" \\
	"libsqlite3-dev" \\
	"libsrtp2-dev" \\
	"libssl-dev" \\
	"libsybdb5" \\
	"libtiff-tools" \\
	"libtonezone-dev" \\
	"libtool" \\
	"libtool-bin" \\
	"libunbound-dev" \\
	"liburiparser-dev" \\
	"libvorbis-dev" \\
	"libxml2-dev" \\
	"lsb-release" \\
	"mailutils" \\
	"mariadb-client" \\
	"mariadb-server" \\
	"mpg123" \\
	"net-tools" \\
	"nmap" \\
	"nodejs" \\
	"npm" \\
	"odbc-mariadb" \\
	"openssh-server" \\
	"openvpn" \\
	"php${str_php_version}" \\
	"php${str_php_version}-bcmath" \\
	"php${str_php_version}-bz2" \\
	"php${str_php_version}-cli" \\
	"php${str_php_version}-common" \\
	"php${str_php_version}-curl" \\
	"php${str_php_version}-curl" \\
	"php${str_php_version}-gd" \\
	"php${str_php_version}-intl" \\
	"php${str_php_version}-ldap" \\
	"php${str_php_version}-mbstring" \\
	"php${str_php_version}-mysql" \\
	"php${str_php_version}-redis" \\
	"php${str_php_version}-soap" \\
	"php${str_php_version}-sqlite3" \\
	"php${str_php_version}-ssh2" \\
	"php${str_php_version}-xml" \\
	"php${str_php_version}-zip" \\
	"php-pear" \\
	"pkg-config" \\
	"python3-mysqldb" \\
	"python-dev-is-python3" \\
	"redis-server" \\
	"rsyslog" \\
	"screen" \\
	"sngrep" \\
	"sox" \\
	"sqlite3" \\
	"subversion" \\
	"sudo" \\
	"sysstat" \\
	"tcpdump" \\
	"tftpd-hpa" \\
	"unixodbc" \\
	"unixodbc-dev" \\
	"uuid" \\
	"uuid-dev" \\
	"vim" \\
	"wget" \\
	"xinetd" \\
	"zip"

# end check for networking in apt key parts
fi
logger -t sng "END FREEPBX APT REPO PART OF LATE COMMAND"
EOFL2
# end apt parts
fi
# end networking parts
fi

# check if we run the installer script immediately after reboot
if $bool_one_shot; then
	cat << EOFL3 >> $fcmdlate
logger -t sng "START ONESHOT PARTS OF LATE COMMAND"

# systemd oneshot for automatically installing on next reboot
cat << EOFO > /target/usr/lib/systemd/system/sng-install-freepbx.service
${str_header}
[Unit]
Description=FreePBX shell script installer
AssertArchitecture=x86-64
AssertOSRelease=VERSION_CODENAME=${str_script_codename}
Requires=network-online.target var.mount tmp.mount var-tmp.mount
# first boot seems buggy but it is a newer systemd condition
#ConditionFirstBoot=yes
#Before=first-boot-complete.target

[Service]
Type=oneshot
# getting a NOPERMISSION error without this sleep, ugh
ExecStartPre=/usr/bin/sleep 15
# make sure we have solid network connectivity before attempting to run the installer
ExecStartPre=/usr/bin/bash -c 'while ! ping -c 1 github.com >/dev/null 2>&1; do echo "Network not reachable, retrying in 5 seconds..."; sleep 5; systemctl restart networking; done'
# actually run the installer, with DAHDI drivers
ExecStart=/usr/bin/bash /var/tmp/sng_freepbx_debian_install.sh ${str_sng_opts}
# if not successful, then get ready to reboot and try again
ExecStartPost=-/bin/sh -c 'latest_log=\$\\\$(ls -t /var/log/pbx/*.log | head -1); grep -q "Finished FreePBX 17 installation process" \\\$latest_log'
# if successful, only then will next command run to prevent reinstall on next boot
ExecStartPost=/usr/bin/systemctl disable sng-install-freepbx
ExecStartPost=echo "FreePBX installation successful!"
# all the StopPost stuff will always run, successful install or not successful
ExecStopPost=echo "System will automatically reboot in one minute."
ExecStopPost=echo "To break out of a reboot loop, run 'systemctl disable sng-install-freepbx'"
ExecStopPost=/usr/bin/sleep 20
ExecStopPost=echo "To break out of a reboot loop, run 'systemctl disable sng-install-freepbx'"
ExecStopPost=/usr/bin/sleep 20
ExecStopPost=echo "To break out of a reboot loop, run 'systemctl disable sng-install-freepbx'"
ExecStopPost=/usr/bin/sleep 20
ExecStopPost=/usr/bin/systemctl reboot
StandardOutput=journal+console
StandardError=inherit

[Install]
WantedBy=multi-user.target
#Wants=first-boot-complete.target
EOFO

in-target systemctl enable sng-install-freepbx

# make the next boot the first boot
#in-target rm /etc/machine-id

logger -t sng "END ONESHOT PARTS OF LATE COMMAND"
EOFL3
# end check on oneshot installer
fi

# generic late command finish
cat << EOFL4 >> $fcmdlate
logger -t sng "START GENERIC PARTS OF LATE COMMAND"

# de-brand
cat << EOFORG > /target/etc/dpkg/origins/sangoma
Vendor: ${str_vendor}
Vendor-URL: ${str_vendor_url}
Parent: Debian
EOFORG

cd /target/etc/dpkg/origins
ln -sf sangoma default

cat << EOFREL > /target/usr/lib/os-release
BUG_REPORT_URL="https://www.github.com/FreePBX/issue-tracker/"
BUILD_ID=${str_script_build}
CPE_NAME=${cpeid}
DOCUMENTATION_URL="https://sangomakb.atlassian.net/wiki/spaces/FP/overview/"
HOME_URL="https://www.freepbx.org/"
ID=debian
NAME="${str_our_full_name}"
PRETTY_NAME="${str_our_full_name} ${str_script_major} with FreePBX ${str_freepbx_version} derived from Debian ${str_script_major} (${str_deb_codename})"
SUPPORT_URL="https://www.freepbx.org/support/"
VARIANT=${str_spice}
VARIANT_ID=${str_spice,,}
VENDOR_NAME=${str_vendor}
VENDOR_URL="${str_vendor_url}"
VERSION="${str_script_major} (${str_script_codename})"
VERSION_CODENAME=${str_script_codename}
VERSION_ID="${str_script_major}"
EOFREL

cat << EOFMOTD > /target/etc/motd

FFFF RR   EEEE EEEE PP  BB  X X
FFF  RRR  EEE  EEE  PPP BBB  X
F    R  R EEEE EEEE P   BB  X X

${str_our_full_name} ${str_script_major} with FreePBX ${str_freepbx_version}
is derived from Debian ${str_script_major} (${str_deb_codename})

${str_our_full_name} ${str_script_version} comes with no guarantees
or warranties of any sorts, either written or implied.

The Distribution is released as GPLv2. Individual packages
in the distribution come with their own licences.

Please visit https://FreePBX.org/ for more information.

EOFMOTD

cp /target/etc/motd /target/usr/share/base-files/motd

echo "FREEPBX INSTALLER PLACEHOLDER - STILL INSTALLING, PLEASE WAIT!!!" >> /target/usr/share/base-files/motd
echo "FREEPBX INSTALLER PLACEHOLDER - STILL INSTALLING, PLEASE WAIT!!!" >> /target/usr/share/base-files/motd
echo "FREEPBX INSTALLER PLACEHOLDER - STILL INSTALLING, PLEASE WAIT!!!" >> /target/usr/share/base-files/motd

sed -i "s/Debian GNU\/Linux/${str_our_full_name}/" /target/etc/issue
sed -i "s/Debian GNU\/Linux/${str_our_full_name}/" /target/etc/issue.net

# no more apt proxy on next reboot and/or when it leaves the lab
# TODO: debate merits of doing it here vs. sng-eol script below
# in-target rm /etc/apt/apt.conf || true
# maybe: echo "Acquire::http::Proxy \"\";" > /target/etc/apt.conf.d/99noaptproxy
# maybe: echo "Acquire::https::Proxy \"\";" >> /target/etc/apt.conf.d/99noaptproxy

# regarding default passwords, we have a lot of info we can work with:
# root@deb12:~# fwconsole sa info
#Activation Status
#	Machine ID:	DE:AD:BE:EF:12:34
#	Lic File:	Present
#	Deployment:	12345678

# setup script to change default password to Machine ID (MAC address)
# and purge any apt-proxy
cat << EOFJ > /target/usr/local/sbin/sng-eol
#!/bin/sh
${str_header}
# change the default passwords to the MAC address
macpass=\\\$(/usr/sbin/fwconsole sa info | grep -m 1 "Machine ID:" | sed 's/Machine ID://' | tr -d '[:blank:]')
macpasslength=\\\$(echo -n \\\$macpass | wc -m | tr -d '[:blank:]')
if [ \\\$macpasslength != 17 ]; then
	macpass=\\\$(ip -br link | grep -m 1 -v LOOPBACK | awk '{print \\\$3}' | tr '[:lower:]' '[:upper:]')
	macpasslength=\\\$(echo -n \\\$macpass | wc -m | tr -d '[:blank:]')
	if [ \\\$macpasslength != 17 ]; then
		echo "Could not change passwords. Is this deployment active ?  Check 'fwconsole sa i'."
	fi
fi
if [ \\\$macpasslength = 17 ]; then
	echo "root:\\\$macpass" | /sbin/chpasswd
	echo "${str_whoami}:\\\$macpass" | /sbin/chpasswd
	echo "Default passwords for 'root' and '${str_whoami}' CLI users changed to: \\\$macpass"
fi

# force user to change their password on next CLI login
/usr/bin/passwd --expire root
/usr/bin/passwd --expire ${str_whoami}

# check if we want to lock the root user
# (this may also done near end of Late Command, depends on bool_lock_root_early variable)
if $bool_lock_root_eol; then
	/usr/bin/passwd -l root
fi

# purge apt-proxy and any other default/warehouse apt configs
rm -f /etc/apt/apt.conf

# only needed at first reboot
systemctl disable sng-install-freepbx || true

# show the freepbx sysadmin info again
fwconsole sa i || true

# self-immolation of installer-related things
#rm -f /usr/local/sbin/sng-eol
rm -f /var/tmp/sng_freepbx_debian_install.sh
rm -f /usr/lib/systemd/system/sng-install-freepbx.service
EOFJ

chmod +x /target/usr/local/sbin/sng-eol

# put wallpaper into position
if [ -s /cdrom/sangoma-wallpaper-for-grub.png ]; then
	cp -a /cdrom/sangoma-wallpaper-for-grub.png /target/boot/grub
fi

# adjust the menu colors
# TODO

# custom GRUB defaults
cat << EOFGD > /target/etc/default/grub.d/10-sangoma.cfg
${str_header}
GRUB_CMDLINE_LINUX=""
GRUB_CMDLINE_LINUX_DEFAULT="quiet"
GRUB_DEFAULT=0
GRUB_DISABLE_OS_PROBER=true
GRUB_DISTRIBUTOR="${str_our_full_name}"
GRUB_GFXMODE=1024x768
GRUB_INIT_TUNE="600 800 1 600 1 700 1 500 1 300 1 0 1 900 1"
GRUB_TIMEOUT=5
EOFGD

# serial port extras for GRUB
cat /proc/cmdline
gotserial=\$(grep -m 1 "console=tty0 console=ttyS0" /proc/cmdline | wc -l)
if [ "\$gotserial" -eq 1 ]; then
	cat << EOFGS > /target/etc/default/grub.d/20-sangoma.cfg
GRUB_CMDLINE_LINUX="\${GRUB_CMDLINE_LINUX} console=tty0 console=ttyS0,115200n8"
GRUB_SERIAL_COMMAND="serial --unit=0 --speed=115200"
GRUB_TERMINAL_INPUT="console serial"
GRUB_TERMINAL_OUTPUT="gfxterm serial"
EOFGS
fi

# set up GRUB tune and wallpaper	
in-target update-grub

# UEFI RAID rsync EFI partitions automatically via GRUB hook
# TODO: consider disk type (s v xv - see disk_type elsewhere)
if [ -d /sys/firmware/efi ] && [ -s /cdrom/copy_to_boot_efi2.j2 ] && [ -b /dev/sdb4 ]; then

	in-target \\
		apt-get \\
		-y \\
		install \\
		"rsync"

	sed \\
		-e 's/{{ raid_disk_first }}/sda1/' \\
		-e 's/{{ raid_disk_second }}/sdb1/' \\
		/cdrom/copy_to_boot_efi2.j2 \\
		> /target/etc/grub.d/90_copy_to_boot_efi2

	in-target bash /etc/grub.d/90_copy_to_boot_efi2
	in-target update-grub

	# must have the efivars accessible in the chroot before running efibootmgr
	mount -t efivarfs efivarfs /target/sys/firmware/efi/efivars

	# reset the primary disk boot label
	#in-target efibootmgr -b 0000 -B || true
	#in-target efibootmgr -b 0000 -c -d /dev/sda -L RAIDprimary -l \\\\EFI\\\\debian\\\\shimx64.efi
	in-target efibootmgr -c -d /dev/sda -L RAIDprimary -l \\\\EFI\\\\debian\\\\shimx64.efi
	umount /target/boot/efi || true
	
	# add the secondary disk boot
	mount /dev/sdb1 /target/boot/efi
	#in-target efibootmgr -b 0001 -B || true
	#in-target efibootmgr -b 0001 -c -d /dev/sdb -L RAIDsecondary -l \\\\EFI\\\\debian\\\\shimx64.efi
	in-target efibootmgr -c -d /dev/sdb -L RAIDsecondary -l \\\\EFI\\\\debian\\\\shimx64.efi
	#in-target grub-install /dev/sdb
	umount /target/boot/efi || true
	mount /dev/sda1 /target/boot/efi

	# boot only from the hard disks in the proper order (primary,secondary)
	# TODO - seems like it is flipping the drives
	rp=\$(efibootmgr | grep -m 1 RAIDprimary | cut -f1 -d' ' | sed 's/Boot//' | sed 's/*//')
	rs=\$(efibootmgr | grep -m 1 RAIDsecondary | cut -f1 -d' ' | sed 's/Boot//' | sed 's/*//')
	in-target efibootmgr -o \$rp,\$rs || true

	# no longer need the efivars because we are done with efibootmgr in the chroot target
	umount /target/sys/firmware/efi/efivars || true

	#uuid2=\$(in-target blkid -o export /dev/sdb1 | grep ^UUID | cut -f2 -d=)

	sed -i '/\/boot\/efi/d' /target/etc/fstab
	echo "# keep working even if the primary disk in the RAID array fails"				>> /target/etc/fstab
	echo "/dev/sda1		/boot/efi	vfat	umask=0077,nofail		0	1"	>> /target/etc/fstab
	echo "/dev/sdb1		/boot/efi2	vfat	umask=0077,nofail,noauto	0	1"	>> /target/etc/fstab

	# wipe reserved part of secondary disk for SSD wear-leveling (3rd partition)
	in-target blkdiscard /dev/sdb3 || true
	in-target sfdisk --delete /dev/sdb 3 || true

fi

# wipe reserved part of primary disk for SSD wear-leveling (3rd partition)
set +e
in-target blkdiscard /dev/sda3
in-target sfdisk --delete /dev/sda 3
in-target blkdiscard /dev/vda3
in-target sfdisk --delete /dev/vda 3
in-target blkdiscard /dev/xvda3
in-target sfdisk --delete /dev/xvda 3
set -e

if [ -n "${str_locked_kernel}" ]; then
	# TODO: DAHDI building with DKMS so we can automatically match kernel updates (hmm, compiler)
	# TODO: speed up the removal of the non-frozen kernel
	#in-target apt-mark hold linux-image-${str_locked_kernel}
	# freeze right there kernel, DAHDI would like a word with you
	gone=\$(ls /target/boot/vmlinuz* | grep -v "${str_locked_kernel}" | cut -f4 -d/ | sed 's/vmlinuz-//')
	in-target apt-get -y remove linux-image-\$gone || true
	in-target apt-get -y install linux-image-${str_locked_kernel}
fi

# ${str_whoami} user can sudo
# requires network at this late point because cdrom is unmounted
in-target apt-get -y install sudo || true
in-target usermod -a -G sudo ${str_whoami} || true

# check if we want to lock the root user
# (this may also done in sng-eol script, check bool_lock_root_eol variable)
if $bool_lock_root_early; then
	in-target /usr/bin/passwd -l root
fi

# network interface names are sticky, based on MAC address,
# and all will be renamed from N to pbxeth
i=0
touch /target/etc/network/interfaces.d/pbx-renames
for mac in \$(ip -o link show | grep ether | cut -f2 -d/ | cut -f2 -d' ' | sort); do
	echo "rename mac/\$mac=pbxeth\$i" >> /target/etc/network/interfaces.d/pbx-renames
	nic=\$(ip -o link show | grep ether | grep -m 1 \$mac | cut -f2 -d: | tr -d ' ')
	sed -i "s/ \$nic/ pbxeth\$i/g" /target/etc/network/interfaces
	i=\$((i+1))
done

sync

# look at disk size to determine how we grow
# limited options in installer binaries,
# so lvresize outside target, then in target resize2fs
# note that lvresize %FREE changes each run eg.
# if 100G free, and partition grows +80% (so 80G),
# then 20G is free for the next partition to grow,
# and a +80% of that 20G would be 16G
# (check out int_lvm_guided_size for where we start eg. 50% of disk)
freeG=\$(vgs --units G --no-suffix --noheadings -o vg_free pbxvg0 | tr -d ' ' | cut -f1 -d.)
logger -t sng "Considering resizes with freeG=\${freeG}"
set +e
if [ \$freeG -lt 20 ]; then
	lvresize -l +20%FREE /dev/mapper/pbxvg0-lvvarspool
	lvresize -l +20%FREE /dev/mapper/pbxvg0-lvvarlog
	lvresize -l +50%FREE /dev/mapper/pbxvg0-lvvar
	lvresize -l +50%FREE /dev/mapper/pbxvg0-lvusr
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvsrv
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvhome
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvroot
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvtmp
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvvartmp
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvusrlocal
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvvarlogaudit
elif [ \$freeG -lt 100 ]; then
	lvresize -l +60%FREE /dev/mapper/pbxvg0-lvvarspool
	lvresize -l +50%FREE /dev/mapper/pbxvg0-lvvarlog
	lvresize -l +50%FREE /dev/mapper/pbxvg0-lvvar
	lvresize -l +50%FREE /dev/mapper/pbxvg0-lvusr
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvsrv
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvhome
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvroot
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvtmp
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvvartmp
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvusrlocal
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvvarlogaudit
elif [ \$freeG -lt 200 ]; then
	lvresize -l +60%FREE /dev/mapper/pbxvg0-lvvarspool
	lvresize -l +50%FREE /dev/mapper/pbxvg0-lvvarlog
	lvresize -l +50%FREE /dev/mapper/pbxvg0-lvvar
	lvresize -l +50%FREE /dev/mapper/pbxvg0-lvusr
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvsrv
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvhome
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvroot
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvtmp
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvvartmp
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvusrlocal
	lvresize -l +2%FREE /dev/mapper/pbxvg0-lvvarlogaudit
elif [ \$freeG -lt 400 ]; then
	lvresize -l +60%FREE /dev/mapper/pbxvg0-lvvarspool
	lvresize -l +40%FREE /dev/mapper/pbxvg0-lvvarlog
	lvresize -l +30%FREE /dev/mapper/pbxvg0-lvvar
	lvresize -l +10%FREE /dev/mapper/pbxvg0-lvusr
	lvresize -l +10%FREE /dev/mapper/pbxvg0-lvsrv
	lvresize -l +10%FREE /dev/mapper/pbxvg0-lvhome
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvroot
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvtmp
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvvartmp
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvusrlocal
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvvarlogaudit
elif [ \$freeG -lt 600 ]; then
	lvresize -l +60%FREE /dev/mapper/pbxvg0-lvvarspool
	lvresize -l +40%FREE /dev/mapper/pbxvg0-lvvarlog
	lvresize -l +40%FREE /dev/mapper/pbxvg0-lvvar
	lvresize -l +10%FREE /dev/mapper/pbxvg0-lvusr
	lvresize -l +10%FREE /dev/mapper/pbxvg0-lvsrv
	lvresize -l +10%FREE /dev/mapper/pbxvg0-lvhome
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvroot
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvtmp
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvvartmp
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvusrlocal
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvvarlogaudit
else
	lvresize -l +60%FREE /dev/mapper/pbxvg0-lvvarspool
	lvresize -l +20%FREE /dev/mapper/pbxvg0-lvvarlog
	lvresize -l +10%FREE /dev/mapper/pbxvg0-lvvar
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvusr
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvroot
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvsrv
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvhome
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvtmp
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvvartmp
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvusrlocal
	lvresize -l +5%FREE /dev/mapper/pbxvg0-lvvarlogaudit
fi

# most of what is left goes to the spool
lvresize -l +90%FREE /dev/mapper/pbxvg0-lvvarspool
set -e

sync

# resize the file system on all 11 LVs
set +e
in-target resize2fs /dev/mapper/pbxvg0-lvhome
in-target resize2fs /dev/mapper/pbxvg0-lvroot
in-target resize2fs /dev/mapper/pbxvg0-lvsrv
in-target resize2fs /dev/mapper/pbxvg0-lvtmp
in-target resize2fs /dev/mapper/pbxvg0-lvusr
in-target resize2fs /dev/mapper/pbxvg0-lvusrlocal
in-target resize2fs /dev/mapper/pbxvg0-lvvar
in-target resize2fs /dev/mapper/pbxvg0-lvvarlog
in-target resize2fs /dev/mapper/pbxvg0-lvvarlogaudit
in-target resize2fs /dev/mapper/pbxvg0-lvvarspool
in-target resize2fs /dev/mapper/pbxvg0-lvvartmp
set -e

in-target sync

logger -t sng "END GENERIC PARTS OF LATE COMMAND"
logger -t sng "END LATE COMMAND"
EOFL4

# fill temporary preseed file, starting with static content
cat << EOFA > $fpreseed0
${str_header}
# Dynamically assembled parts based on choices made by the user.
# Each output ISO gets a slightly different version of this file.
#
# The preseed is being assembled piece-by-piece in an order
# that is convenient for the generating shell script,
# starting with things that are common to all systems.
# Ultimately, though, the order of items in the preseed file
# does not change the functionality, only the readability.

# Priority. Boot line does this, but repeated for clarity.
d-i debconf/priority select critical

# Locale. Boot line sometimes does this - depends on bool_fully_automated_installation.
#d-i debian-installer/locale string en_US
#d-i debian-installer/language string en
#d-i debian-installer/country string US

# Keyboard. Boot line does this, but repeated for clarity.
#d-i keyboard-configuration/xkb-keymap select us

# Disable RAID detection. Boot line does this, but repeated for clarity.
# Either way, it does not seem to work very well when overwriting RAID,
# so we use dd command in the early partman script instead.
d-i disk-detect/dmraid/enable boolean false

# Clock.
d-i clock-setup/utc boolean true

# New internal TLD - thanks ICANN (August 2024).
d-i netcfg/get_domain string internal

# Apt setup (use the Debian archive mirror)
d-i mirror/country string manual
d-i mirror/http/hostname string deb.debian.org
d-i mirror/http/directory string /debian
d-i mirror/http/proxy string

# Disable scanning additional installation media
d-i apt-setup/cdrom/set-first boolean false

# Disable the cdrom entries (no effect on netinst image)
d-i apt-setup/disable-cdrom-entries boolean true

# Package selection via task groups.
tasksel tasksel/first multiselect standard, web-server, ssh-server

# TODO: Can we lock the kernel version here ?
# does not seem to work this way in base-installer...
#d-i base-installer/kernel/image select linux-image-${str_locked_kernel}

# TODO: Extra packages.
#d-i pkgsel/include string git ansible

# TODO: Do not upgrade packages during initial installation.
# But toggling these prevents upgrades on subsequent reboots.
#d-i pkgsel/upgrade select none

# TODO: automatic security updates
#d-i pkgsel/update-policy select Install security updates automatically

# No package usage survey.
popularity-contest popularity-contest/participate boolean false

# Boot loader settings (Grub)
d-i grub-installer/only_debian boolean true
d-i grub-installer/with_other_os boolean false

# Do not let grub mount file systems looking for OSes.
d-i grub-installer/enable_os_prober_otheros_yes boolean false
d-i grub-installer/enable_os_prober_otheros_no boolean true
d-i grub2/enable_os_prober boolean false

# Username. The way its been.
d-i passwd/make-user boolean true
d-i passwd/username string ${str_whoami}
d-i passwd/user-fullname string ${str_whoami}

# Extra preseed commands to run at various points.
# Boot command does not work on network installs.
d-i preseed/boot_command string /cdrom/sng_boot_command

# Late command is very heavily customized and works on all installs.
d-i preseed/late_command string /cdrom/sng_late_command

# Don't go overboard on swap if we have a lot of RAM.
# TODO: does not seem to work
#d-i partman-auto/cap-ram string 4096

#
# Dynamic parts based on value of tftphost from GRUB linux command line...
#

# Partman early command to run before partitioning.
# and just before the mdadm tool runs to detect RAID.
# TODO: preseed_fetch might handle these downloads automatically
#preseed_fetch /$dcdrom/sng_partman_early_command /cdrom/sng_partman_early_command; \\
#preseed_fetch /$dcdrom/sng_late_command /cdrom/sng_late_command; \\
#preseed_fetch /$dcdrom/copy_to_boot_efi2.j2 /cdrom/copy_to_boot_efi2.j2; \\
#preseed_fetch /$dcdrom/freepbx-sangoma-apt-repo-pubkey.asc /cdrom/freepbx-sangoma-apt-repo-pubkey.asc; \\
#preseed_fetch /$dcdrom/WARNING.txt /cdrom/WARNING.txt; \\
#preseed_fetch /$dcdrom/sangoma-wallpaper-for-grub.png /cdrom/sangoma-wallpaper-for-grub.png; \\
d-i partman/early_command string \\
	mkdir -p /cdrom; \\
	tftp -g -l /cdrom/sng_partman_early_command -r /$dcdrom/sng_partman_early_command \${tftphost}; \\
	tftp -g -l /cdrom/sng_late_command -r /$dcdrom/sng_late_command \${tftphost}; \\
	tftp -g -l /cdrom/copy_to_boot_efi2.j2 -r /$dcdrom/copy_to_boot_efi2.j2 \${tftphost}; \\
	tftp -g -l /cdrom/freepbx-sangoma-apt-repo-pubkey.asc -r /$dcdrom/freepbx-sangoma-apt-repo-pubkey.asc \${tftphost}; \\
	tftp -g -l /cdrom/WARNING.txt -r /$dcdrom/WARNING.txt \${tftphost}; \\
	tftp -g -l /cdrom/sangoma-wallpaper-for-grub.png -r /$dcdrom/sangoma-wallpaper-for-grub.png \${tftphost}; \\
	chmod 0555 /cdrom/sng_partman_early_command; \\
	chmod 0555 /cdrom/sng_late_command; \\
	sh /cdrom/sng_partman_early_command

#
# Dynamic parts based on variables defined at beginning of the ISO generation script...
#

# This makes partman automatically partition without confirmation, provided
# that you told it what to do using one of the methods above.
d-i partman-partitioning/confirm_write_new_label boolean ${bool_automatic}

# If one of the disks that are going to be automatically partitioned
# contains an old LVM configuration, the user will normally receive a
# warning. This can be preseeded away...
d-i partman-lvm/device_remove_lvm boolean ${bool_automatic}

# The same applies to pre-existing software RAID array:
d-i partman-md/device_remove_md boolean ${bool_automatic}

# Keep cleaning the LVM parts out (for reinstalls)
d-i partman-auto/purge_lvm_from_device boolean ${bool_automatic}

# Confirmation to write the LVM partitions.
d-i partman-lvm/confirm boolean ${bool_automatic}
d-i partman-lvm/confirm_nooverwrite boolean ${bool_automatic}

# Optimal alignment is the default.
d-i partman/alignment string optimal

d-i partman-auto/method string regular
d-i partman/choose_partition select Finish
d-i partman/confirm boolean ${bool_automatic}
d-i partman/confirm_nooverwrite boolean ${bool_automatic}

# Something close to FAI.
# Boot line does this, but repeated for clarity.
# Either way, does not seem to matter if this is true or false.
d-i auto-install/enable boolean ${bool_automatic}

# Timezone.
d-i time/zone string ${str_timezone}

# Hostname.
d-i netcfg/get_hostname string ${str_host_name}

# Some variations now depending on internal variables eg. testing.
EOFA

if $bool_lock_root_early; then
	echo "# Root. Locked early." >> $fpreseed0
	echo "d-i passwd/root-login boolean false" >> $fpreseed0
else
	echo "# Root. The way its been." >> $fpreseed0
	echo "d-i passwd/root-login boolean true" >> $fpreseed0
fi

if [ -n "${str_old_root_pass}" ]; then
	echo "d-i passwd/root-password password ${str_old_root_pass}" >> $fpreseed0
	echo "d-i passwd/root-password-again password ${str_old_root_pass}" >> $fpreseed0
fi

if [ -n "${str_old_user_pass}" ]; then
	echo "# User default password. The way its been." >> $fpreseed0
	echo "d-i passwd/user-password password ${str_old_user_pass}" >> $fpreseed0
	echo "d-i passwd/user-password-again password ${str_old_user_pass}" >> $fpreseed0
fi

# automatic install is the norm, but we can step thru if we want
if $bool_automatic; then
	echo "# Automatic mode active." >> $fpreseed0
	echo "d-i preseed/interactive boolean false" >> $fpreseed0
else
	echo "# Step-by-step with questions preset but not marked as seen." >> $fpreseed0
	echo "d-i preseed/interactive boolean true" >> $fpreseed0
fi

# shoud we eliminate pause before reboot in production - just reboot it
if $bool_pause_reboot; then
	echo "# Pausing before reboot." >> $fpreseed0
else
	echo "# Do not pause before reboot." >> $fpreseed0
	echo "d-i finish-install/reboot_in_progress note" >> $fpreseed0
fi

# will there be networking
if $bool_networking; then
	echo "# Networking activated." >> $fpreseed0
	echo "d-i netcfg/choose_interface select auto" >> $fpreseed0
	if $bool_proxying; then
		echo "# Proxy activated for downloading packages faster." >> $fpreseed0
		echo "d-i mirror/http/proxy string http://${str_proxy_host}:${int_proxy_port}/" >> $fpreseed0
	fi
	echo "d-i apt-setup/use_mirror boolean true" >> $fpreseed0
	echo "d-i apt-setup/no_mirror boolean false" >> $fpreseed0
else
	echo "# NO Networking. Clean room install." >> $fpreseed0
	echo "d-i netcfg/enable boolean false" >> $fpreseed0
	echo "d-i apt-setup/use_mirror boolean false" >> $fpreseed0
	echo "d-i apt-setup/no_mirror boolean true" >> $fpreseed0
fi

# that ends the common things between all preseeds
cp $fpreseed0 $fpreseed1

# we can pseudo-randomly generate passwords during installation
if [ $int_new_pass_length -gt 0 ]; then
	echo "# sng_early_command is entirely for password changes (only on cdrom)" >> $fpreseed1
	echo "d-i preseed/early_command string /cdrom/sng_early_command" >> $fpreseed1
fi

cat << EOFX1 >> $fpreseed1
# command will return list of preseeds - either ng or raid, plus disks
#preseed_fetch /$dcdrom/sng_preseed_chooser /cdrom/sng_preseed_chooser; \\
d-i preseed/include_command string \\
	mkdir -p /cdrom; \\
	tftp -g -l /cdrom/sng_preseed_chooser -r /$dcdrom/sng_preseed_chooser \${tftphost}; \\
	chmod 0555 /cdrom/sng_preseed_chooser; \\
	sh /cdrom/sng_preseed_chooser
EOFX1

cp $fpreseed1 $fpreseed2

echo "d-i preseed/include string preseed_crypto.cfg" >> $fpreseed2

# now move on to filling each of the preseed_*.cfg files

#
# ng - next generation
#

cat << EOFD > $fpreseedng
${str_header}
# Yes we want to leave a little unmounted space on the physical disk.
# This allows more SSD wear-leveling.
d-i partman-basicmethods/method_only boolean false
#d-i partman-basicfilesystems/no_mount_point boolean false

# TODO: should LVM VG name be randomized on each install ?
d-i partman-auto-lvm/new_vg_name string pbxvg0

# On re-installs, a slight change in VG name.
d-i partman-auto-lvm/new_vg_name_exists string pbxvg1

# Allow local admins to grow LVs later on.
# (We also explicitly reserve free space later in recipe.)
# TODO: base this on disk size
d-i partman-auto-lvm/guided_size string ${int_lvm_guided_size}%
EOFD

cp $fpreseedng $fpreseedraid

# each disk type gets a separate NG disk file
for disk_type in s v xv; do
	cat << EOFND > $dtmp/$dcdrom/preseed_nonraid_disk_${disk_type}.cfg
${str_header}
# one disk
d-i partman-auto/disk string /dev/${disk_type}da

# typically grub installed on '${disk_type}da'
d-i grub-installer/bootdev string /dev/${disk_type}da
EOFND
done

# physical disks are very "s"pecial
cat << EOFNDS >> $dtmp/$dcdrom/preseed_nonraid_disk_s.cfg
# Use GPT for everything physical. Helps with UEFI.
#d-i partman-basicfilesystems/choose_label select gpt
#d-i partman-basicfilesystems/default_label string gpt
#d-i partman/choose_label select gpt
#d-i partman/default_label string gpt
d-i partman-partitioning/choose_label select gpt
d-i partman-partitioning/default_label string gpt
EOFNDS

# generic NG
cat << EOFN >> $fpreseedng
# Expert recipe. Very tasty.
d-i partman-auto/choose_recipe select pngnx_nonraid_recipe

# TODO: report upstream that expert_recipe_file is not working
#d-i partman-auto/expert_recipe_file string /cdrom/sng_partman_recipes.bnf

# TODO: next version of Debian might require changes to efi partition:
#       * primary
#       * iflabel{ msdos gpt }
# Instead of the file source, we spell it out in one line (using slashes.)
d-i partman-auto/expert_recipe string			\\
pngnx_nonraid_recipe ::					\\
	1 1 1 free					\\
		label{ sngnonefi }			\\
		\$iflabel{ msdos }			\\
		\$reusemethod{ }			\\
		method{ biosgrub }			\\
		format{ }				\\
	.						\\
	768 788 1024 free				\\
		label{ sngefi }				\\
		\$iflabel{ gpt }			\\
		\$reusemethod{ }			\\
		method{ efi }				\\
		format{ }				\\
	.						\\
	768 788 1024 ext4				\\
		label{ sngboot }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /boot }			\\
		options/discard{ discard }		\\
	.						\\
	10 500 ${int_mb_ssd_wear} free			\\
		label{ sngssdwear }			\\
		\$iflabel{ gpt }			\\
		method{ keep }				\\
		options/discard{ discard }		\\
	.						\\
	1100 1200 2500 ext4				\\
		label{ sngroot }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvroot }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ / }				\\
		options/discard{ discard }		\\
	.						\\
	${int_mb_swap_min} 777 ${int_mb_swap_max} linux-swap		\\
		label{ sngswap }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvswap }			\\
		method{ swap }				\\
		format{ }				\\
	.						\\
	100 777 2000 ext4				\\
		label{ sngsrv }				\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvsrv }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /srv }			\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/nosuid{ nosuid }		\\
	.						\\
	100 777 2000 ext4				\\
		label{ snghome }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvhome }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /home }			\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/nosuid{ nosuid }		\\
	.						\\
	100 777 2000 ext4				\\
		label{ sngusrlocal }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvusrlocal }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /usr/local }		\\
		options/discard{ discard }		\\
	.						\\
	100 777 2000 ext4				\\
		label{ sngtmp }				\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvtmp }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /tmp }			\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/noexec{ noexec }		\\
		options/nosuid{ nosuid }		\\
	.						\\
	4800 5555 10000 ext4				\\
		label{ sngusr }				\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvusr }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /usr }			\\
		options/discard{ discard }		\\
	.						\\
	3500 5555 15151 ext4				\\
		label{ sngvar }				\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvvar }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /var }			\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/nosuid{ nosuid }		\\
	.						\\
	200 1111 5000 ext4				\\
		label{ sngvartmp }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvvartmp }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /var/tmp }			\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/noexec{ noexec }		\\
		options/nosuid{ nosuid }		\\
	.						\\
	100 5555 15151 ext4				\\
		label{ sngvarlog }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvvarlog }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /var/log }			\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/noexec{ noexec }		\\
		options/nosuid{ nosuid }		\\
	.						\\
	100 1111 5000 ext4				\\
		label{ sngvarlogaudit }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvvarlogaudit }		\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /var/log/audit }		\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/noexec{ noexec }		\\
		options/nosuid{ nosuid }		\\
	.						\\
	100 5555 -1 ext4				\\
		label{ sngvarspool }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvvarspool }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /var/spool }		\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/nosuid{ nosuid }		\\
	.
EOFN

cp $fpreseedng $fpreseedcrypto

echo "d-i partman-auto/method string lvm" >> $fpreseedng

#
# crypto
#

cat << EOFZ >> $fpreseedcrypto
# TODO preseed the disk password
d-i partman-auto/method string crypto
d-i partman-auto-crypto/erase_disks boolean false
EOFZ

#
# raid
#

# each disk type gets a separate raid disk file
for disk_type in s v xv; do
	cat << EOFRD > $dtmp/$dcdrom/preseed_raid_disk_${disk_type}.cfg
${str_header}
# RAID on '${disk_type}da' and '${disk_type}db'.
d-i partman-auto/disk string /dev/${disk_type}da /dev/${disk_type}db

# GRUB specifics for RAID
d-i grub-installer/bootdev string /dev/${disk_type}da /dev/${disk_type}db

# RAID recipe.
d-i partman-auto-raid/recipe string				\\
	1 2 0 ext4 /boot /dev/${disk_type}da2#/dev/${disk_type}db2	\\
	.							\\
	1 2 0 lvm - /dev/${disk_type}da4#/dev/${disk_type}db4		\\
	.
EOFRD
done

# physical disks are very "s"pecial
cat << EOFRDS >> $dtmp/$dcdrom/preseed_raid_disk_s.cfg
# Use GPT for everything physical. Helps with UEFI.
#d-i partman-basicfilesystems/choose_label select gpt
#d-i partman-basicfilesystems/default_label string gpt
#d-i partman/choose_label select gpt
#d-i partman/default_label string gpt
d-i partman-partitioning/choose_label select gpt
d-i partman-partitioning/default_label string gpt
EOFRDS

# generic raid parts
cat << EOFR >> $fpreseedraid
# Only needed if /boot is in the LVM.
#d-i partman-auto-lvm/no_boot boolean ${bool_automatic}

d-i partman-auto/method string raid

# RAID continued. (Some redundancies TODO cleaning them.)
d-i partman-md/confirm boolean ${bool_automatic}
d-i partman-md/confirm_nooverwrite boolean ${bool_automatic}

# RAID expert recipe.
# TODO: limit RAID to physical only
d-i partman-auto/choose_recipe select pngnx_raid_recipe
d-i partman-auto/expert_recipe string			\\
pngnx_raid_recipe ::					\\
	1 1 1 free					\\
		label{ sngnonefi }			\\
		\$iflabel{ msdos }			\\
		\$reusemethod{ }			\\
		method{ biosgrub }			\\
		format{ }				\\
	.						\\
	768 788 1024 free				\\
		label{ sngefi }				\\
		\$iflabel{ gpt }			\\
		\$reusemethod{ }			\\
		method{ efi }				\\
		format{ }				\\
	.						\\
	768 788 1024 raid				\\
		label{ sngboot }			\\
		method{ raid }				\\
		format{ }				\\
	.						\\
	10 500 ${int_mb_ssd_wear} free			\\
		label{ sngssdwear }			\\
		method{ keep }				\\
		options/discard{ discard }		\\
	.						\\
	3500 9999 -1 raid				\\
		label{ sngraid }			\\
		method{ raid }				\\
		format{ }				\\
	.						\\
	1100 1200 2500 ext4				\\
		label{ sngroot }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvroot }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ / }				\\
		options/discard{ discard }		\\
	.						\\
	${int_mb_swap_min} 777 ${int_mb_swap_max} linux-swap		\\
		label{ sngswap }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvswap }			\\
		method{ swap }				\\
		format{ }				\\
	.						\\
	100 777 2000 ext4				\\
		label{ sngsrv }				\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvsrv }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /srv }			\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/nosuid{ nosuid }		\\
	.						\\
	100 777 2000 ext4				\\
		label{ snghome }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvhome }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /home }			\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/nosuid{ nosuid }		\\
	.						\\
	100 777 2000 ext4				\\
		label{ sngusrlocal }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvusrlocal }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /usr/local }		\\
		options/discard{ discard }		\\
	.						\\
	100 777 2000 ext4				\\
		label{ sngtmp }				\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvtmp }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /tmp }			\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/noexec{ noexec }		\\
		options/nosuid{ nosuid }		\\
	.						\\
	4800 5555 10000 ext4				\\
		label{ sngusr }				\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvusr }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /usr }			\\
		options/discard{ discard }		\\
	.						\\
	3500 5555 15151 ext4				\\
		label{ sngvar }				\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvvar }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /var }			\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/nosuid{ nosuid }		\\
	.						\\
	200 1111 5000 ext4				\\
		label{ sngvartmp }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvvartmp }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /var/tmp }			\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/noexec{ noexec }		\\
		options/nosuid{ nosuid }		\\
	.						\\
	100 5555 15151 ext4				\\
		label{ sngvarlog }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvvarlog }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /var/log }			\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/noexec{ noexec }		\\
		options/nosuid{ nosuid }		\\
	.						\\
	100 1111 5000 ext4				\\
		label{ sngvarlogaudit }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvvarlogaudit }		\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /var/log/audit }		\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/noexec{ noexec }		\\
		options/nosuid{ nosuid }		\\
	.						\\
	100 5555 -1 ext4				\\
		label{ sngvarspool }			\\
		\$defaultignore{ }			\\
		\$lvmok{ }				\\
		lv_name{ lvvarspool }			\\
		method{ format }			\\
		format{ }				\\
		use_filesystem{ }			\\
		filesystem{ ext4 }			\\
		mountpoint{ /var/spool }		\\
		options/discard{ discard }		\\
		options/nodev{ nodev }			\\
		options/nosuid{ nosuid }		\\
	.
EOFR

# done writing to preseed files in the local temp staging directory
chmod 0444 $fpreseed1
chmod 0444 $fpreseed2
chmod 0444 $fpreseedng
chmod 0444 $fpreseedcrypto
chmod 0444 $fpreseedraid
chmod 0444 $fpreseedraiddisks
chmod 0444 $fpreseedraiddiskv
chmod 0444 $fpreseedraiddiskxv
chmod 0444 $fpreseednonraiddisks
chmod 0444 $fpreseednonraiddiskv
chmod 0444 $fpreseednonraiddiskxv

# recipes done too (even though they do not yet work in external files)
touch $frecipes
chmod 0444 $frecipes

# the Sangoma FreePBX repo
touch $fpubkey
chmod 0444 $fpubkey

# make sure all the preseed commands are executable
chmod 0555 $fcmdearlypartman
chmod 0555 $fcmdearly
chmod 0555 $fcmdlate
chmod 0555 $fcmdboot
chmod 0555 $fcmdpreseedchooser

# extract files we need to edit from the vanilla input ISO
xorriso -osirrox on -indev $fn_iso_input -extract md5sum.txt $fmd5sumtxt
xorriso -osirrox on -indev $fn_iso_input -extract boot/grub/grub.cfg $fgrubcfg
xorriso -osirrox on -indev $fn_iso_input -extract boot/grub/theme/1 $fgrubtheme1
xorriso -osirrox on -indev $fn_iso_input -extract isolinux/isolinux.cfg $fisolinuxcfg
xorriso -osirrox on -indev $fn_iso_input -extract isolinux/txt.cfg $fisolinuxtxt
xorriso -osirrox on -indev $fn_iso_input -extract isolinux/menu.cfg $fisolinuxmenu
xorriso -osirrox on -indev $fn_iso_input -extract isolinux/stdmenu.cfg $fisolinuxstd
xorriso -osirrox on -indev $fn_iso_input -extract .disk/info $fdiskinfo
xorriso -osirrox on -indev $fn_iso_input -extract README.txt $fdebreadmetxt

# add the md5 of the preseeds and the preseed commands into md5sum.txt
# as well as the things we ripped out and are changing
chmod 0755 $fmd5sumtxt

# things we are about to change from the stock ISO
sed -i "/\.\/\.disk\/info/d" $fmd5sumtxt
sed -i "/\.\/boot\/grub\/grub\.cfg/d" $fmd5sumtxt
sed -i "/\.\/boot\/grub\/theme\/1/d" $fmd5sumtxt
sed -i "/\.\/isolinux\/isolinux\.cfg/d" $fmd5sumtxt
sed -i "/\.\/isolinux\/txt\.cfg/d" $fmd5sumtxt
sed -i "/\.\/isolinux\/menu\.cfg/d" $fmd5sumtxt
sed -i "/\.\/isolinux\/stdmenu\.cfg/d" $fmd5sumtxt
sed -i "/\.\/README\.txt/d" $fmd5sumtxt

# things we remove from the stock ISO
# TODO: is this necessary ?
sed -i "/\.\/boot\/grub\/theme\/1-/d" $fmd5sumtxt
sed -i "/\.\/boot\/grub\/theme\/dark-/d" $fmd5sumtxt
sed -i "/\.\/css\/debinstall.css/d" $fmd5sumtxt
sed -i "/\.\/css\/debinstall-print.css/d" $fmd5sumtxt
sed -i "/\.\/doc/d" $fmd5sumtxt
sed -i "/\.\/css\/debinstall-print.css/d" $fmd5sumtxt
sed -i "/\.\/isolinux\/f1.txt/d" $fmd5sumtxt
sed -i "/\.\/isolinux\/f2.txt/d" $fmd5sumtxt
sed -i "/\.\/isolinux\/f9.txt/d" $fmd5sumtxt
sed -i "/\.\/isolinux\/f10.txt/d" $fmd5sumtxt
sed -i "/\.\/README\.html/d" $fmd5sumtxt
sed -i "/\.\/README\.mirrors\.html/d" $fmd5sumtxt
sed -i "/\.\/README\.mirrors\.txt/d" $fmd5sumtxt

# earlier method plows ahead in the installer right from the GRUB/PXELINUX menu
# alternatively, offer a more cautious approach that requires GRUB/PXELINUX menu navigation
if $bool_fully_automated_installation; then
	# plow right ahead
	# non-EFI
	# modify isolinux/isolinux.cfg to install automatically on BIOS boots
	sed -i "s/vesamenu.c32/install/" $fisolinuxcfg
	# TODO: longer pause before auto-installing (SAFETY)
	# modify isolinux/txt.cfg to use the preseed.cfg and USA USA USA
	sed -i "s/--- quiet/auto=true priority=critical file=\/cdrom\/preseed.cfg locale=en_US language=en country=US keymap=us dmraid=false console=tty0 console=ttyS0,115200n8 --- quiet/" $fisolinuxtxt
	# adjust menu to make mention of FreePBX
	sed -i "s/Debian/${str_our_full_name}/" $fisolinuxmenu
	# EFI
	# modify boot/grub/grub.cfg to automatically preseed install on EFI boots
	sed -i "s/--- quiet/auto=true priority=critical file=\/cdrom\/preseed.cfg locale=en_US language=en country=US keymap=us dmraid=false console=tty0 console=ttyS0,115200n8 --- quiet/" $fgrubcfg
	chmod +w $fgrubcfg
	echo "set default=1" >> $fgrubcfg
	# TODO: longer pause before auto-installing (SAFETY)
	echo "set timeout=2" >> $fgrubcfg
	chmod -w $fgrubcfg
else
	# more cautious approach
	# non-EFI
	chmod +w $fisolinuxmenu
	cat << EOFISO > $fisolinuxmenu
menu hshift 2
menu width 70
menu title ${str_our_full_name} BIOS Installer menu
include stdmenu.cfg
menu begin fpbx
	menu label ^Auto FreePBX ${str_freepbx_version} "${str_spice}" disk wipe install
		menu title Auto FreePBX ${str_freepbx_version} "${str_spice}" disk wipe install
		include stdmenu.cfg
		label mainmenu
			menu label ^Back...
			menu exit
		label autofpbx
			menu label ^YES AUTOMATICALLY WIPE MY DISK AND INSTALL
			kernel /install.amd/vmlinuz
			append vga=788 initrd=/install.amd/initrd.gz auto=true file=/cdrom/preseed.cfg dmraid=false priority=critical --- quiet
			text help


	WARNING: The installer will wipe all your disks automatically.
	RAID1 is automatic on disks > ~100G - but works better on UEFI.
	Version: ${str_script_version} Build: ${str_script_build}
			endtext
		label autofpbxserial
			menu label YES AUTO WIPE MY DISK AND INSTALL (^SERIAL)
			kernel /install.amd/vmlinuz
			append initrd=/install.amd/initrd.gz auto=true file=/cdrom/preseed.cfg dmraid=false priority=critical console=tty0 console=ttyS0,115200n8 --- quiet
			text help


	WARNING: The installer will wipe all your disks automatically.
	RAID1 is automatic on disks > ~100G - but works better on UEFI.
	This option will send and receive control on the serial port.
	Version: ${str_script_version} Build: ${str_script_build}
			endtext
menu end
label stock
	menu label ^Vanilla "${str_script_codename}" install
	kernel /install.amd/vmlinuz
	append vga=788 initrd=/install.amd/initrd.gz --- quiet
label stockserial
	menu label Va^nilla "${str_script_codename}" install (SERIAL)
	kernel /install.amd/vmlinuz
	append initrd=/install.amd/initrd.gz console=tty0 console=ttyS0,115200n8 --- quiet
	text help


	This option will send and receive control on the serial port.
	endtext
label rescue
	menu label ^Rescue mode
	kernel /install.amd/vmlinuz
	append vga=788 initrd=/install.amd/initrd.gz rescue/enable=true
label rescueserial
	menu label R^escue mode (SERIAL)
	kernel /install.amd/vmlinuz
	append initrd=/install.amd/initrd.gz rescue/enable=true console=tty0 console=ttyS0,115200n8
	text help


	This option will send and receive control on the serial port.
	endtext
label help
	menu label ^Help tips
	text help


	Heads up - this is the old BIOS installer. Instead, you might
	try the UEFI installer. (Check your BIOS.) And take a backup!
	RAID1 is automatic on disks > ~100G - but works better on UEFI.
	WARNING: The installer will wipe all your disks automatically.
	Version: ${str_script_version} Build: ${str_script_build}
	endtext
EOFISO
	chmod -w $fisolinuxmenu
	# EFI
	chmod +w $fgrubcfg
	sed '/^menuentry/,$d' $fgrubcfg > $ftmpgrubcfg
	#sed -i 's/terminal_output gfxterm/terminal_output console serial gfxterm/' $ftmpgrubcfg
	cp $ftmpgrubcfg $fgrubcfg
	cat << EOFGRUB >> $fgrubcfg
serial --unit=0 --speed=115200
terminal_input --append serial
terminal_output --append serial
set menu_color_normal=white/black
set menu_color_highlight=yellow/black
set color_normal=white/black
set color_highlight=yellow/black
set background_color=black
submenu --hotkey=a 'Auto FreePBX ${str_freepbx_version} "${str_spice}" disk wipe install' {
    set menu_color_normal=white/black
    set menu_color_highlight=yellow/black
    set background_color=black
    menuentry --hotkey=y 'YES AUTOMATICALLY WIPE MY DISK AND INSTALL' {
        set background_color=black
        linux    /install.amd/vmlinuz auto=true file=/cdrom/preseed.cfg dmraid=false priority=critical vga=788 --- quiet
        initrd   /install.amd/initrd.gz
    }
    menuentry --hotkey=s 'YES AUTOMATICALLY WIPE MY DISK AND INSTALL (SERIAL)' {
        set background_color=black
        linux    /install.amd/vmlinuz auto=true file=/cdrom/preseed.cfg dmraid=false priority=critical console=tty0 console=ttyS0,115200n8 --- quiet
        initrd   /install.amd/initrd.gz
    }
}
menuentry --hotkey=n 'Vanilla "${str_script_codename}" install' {
    set background_color=black
    linux    /install.amd/vmlinuz vga=788 --- quiet
    initrd   /install.amd/initrd.gz
}
menuentry --hotkey=w 'Vanilla "${str_script_codename}" install (SERIAL)' {
    set background_color=black
    linux    /install.amd/vmlinuz console=tty0 console=ttyS0,115200n8 --- quiet
    initrd   /install.amd/initrd.gz
}
menuentry --hotkey=r 'Rescue mode' {
    set background_color=black
    linux    /install.amd/vmlinuz vga=788 rescue/enable=true
    initrd   /install.amd/initrd.gz
}
menuentry --hotkey=e 'Rescue mode (SERIAL)' {
    set background_color=black
    linux    /install.amd/vmlinuz rescue/enable=true console=tty0 console=ttyS0,115200n8
    initrd   /install.amd/initrd.gz
}
menuentry --hotkey=h 'Help tips' {
    echo ""
    echo "WARNING: The installer will wipe all your disks automatically."
    echo "         Did you take a backup of any important existing data ?"
    echo ""
    echo "RAID1 is automatic on disks > ~100G -- make sure you use a smaller USB"
    echo "to install from; otherwise, it will become part of the RAID array."
    echo ""
    echo "The SERIAL options will send and receive control on the serial port."
    echo ""
    echo "Please visit https://FreePBX.org for more detailed information."
    echo ""
    echo "Script Name: ${str_script_name}"
    echo "Script Build: ${str_script_build}"
    echo "Script Version: ${str_script_version}"
    echo "FreePBX Version: ${str_freepbx_version}"
    echo "Spiciness: ${str_spice}"
    echo "SFPBX output ISO: ${fn_iso_output}"
    echo ""
    echo "Press ESCAPE to go back to the main installer menu"
    sleep --verbose --interruptible 60
}
set default=saved
set timeout=-1
EOFGRUB
	chmod -w $fgrubcfg
fi

# adjust the disk info
sed -i "s/^Debian.*/${str_our_full_name} installer ${str_script_version}/" $fdiskinfo

# adjust GRUB menu to make mention of FreePBX
sed -i "s/^title-text:.*/title-text: \"${str_our_full_name}\"/" $fgrubtheme1
sed -i "s/Debian GNU\/Linux/${str_our_full_name}/" $fgrubtheme1

# ADD A WARNING
cat << EOFWARN > $fsngreadmewarning
${str_header}
WARNING: This ISO might AUTOMATICALLY wipe ALL your hard disks when you boot with it!!! See the preseed.cfg file for details.
WARNING: This ISO might AUTOMATICALLY wipe ALL your hard disks when you boot with it!!! See the preseed.cfg file for details.
WARNING: This ISO might AUTOMATICALLY wipe ALL your hard disks when you boot with it!!! See the preseed.cfg file for details.
EOFWARN

# new README.txt
cat << EOFRDME > $fnewreadmetxt
###########################################################

# HOWDY, WORLD!
# WELCOME TO SANGOMA FREEPBX!!
# DERIVED FROM DEBIAN GNU/LINUX!!!

Sangoma is providing this installer ISO to the community
as part of our commitment to open source projects, best
exemplified by our sponsorship and stewardship of both
Asterisk and FreePBX, making Sangoma the largest open
source telecommunications software company in the world.

Sangoma engineers developed this ISO to fulfill our own
needs to sell Asterisk and FreePBX based appliances, but
hopefully you find it useful for your purposes as well.

Please visit our website at https://Sangoma.com to learn
more about the company and know that your purchase of our
phones, hardware, appliances, and support helps us to keep
generating great software such as this installer.

# LAND ACKNOWLEDGEMENT

If you downloaded this ISO from https://FreePBX.org
then you should know that Sangoma derives most of it from
stock vanilla Debian ISOs available at https://Debian.org
We stick in some shell scripts, spicy preseeds, and paint.
We also add our own Debian-compatible package repository
where we maintain special builds of Asterisk and FreePBX.

Special thanks to the Debian developers for having such
a fine ISO that we can build on!

###########################################################
EOFRDME

# de-branding - forget the old Debian doc completely
#cat $fdebreadmetxt >> $fnewreadmetxt

# EULA from Sangoma 7
cat << EOFEULA > $feula
${str_our_full_name} ${str_script_version} End User License Agreement

${str_our_full_name} ${str_script_version} comes with no guarantees
or warranties of any sorts, either written or implied.

The Distribution is released as GPLv2. Individual packages
in the distribution come with their own licences.
EOFEULA

# hash the changes we made to files from stock ISO
m5=$(md5sum $fgrubcfg | cut -f1 -d' ')
echo "${m5}  ./boot/grub/grub.cfg" >> $fmd5sumtxt
m5=$(md5sum $fgrubtheme1 | cut -f1 -d' ')
echo "${m5}  ./boot/grub/theme/1" >> $fmd5sumtxt
m5=$(md5sum $fisolinuxcfg | cut -f1 -d' ')
echo "${m5}  ./isolinux/isolinux.cfg" >> $fmd5sumtxt
m5=$(md5sum $fisolinuxtxt | cut -f1 -d' ')
echo "${m5}  ./isolinux/txt.cfg" >> $fmd5sumtxt
m5=$(md5sum $fisolinuxmenu | cut -f1 -d' ')
echo "${m5}  ./isolinux/menu.cfg" >> $fmd5sumtxt
m5=$(md5sum $fisolinuxstd | cut -f1 -d' ')
echo "${m5}  ./isolinux/stdmenu.cfg" >> $fmd5sumtxt
m5=$(md5sum $fdiskinfo | cut -f1 -d' ')
echo "${m5}  ./.disk/info" >> $fmd5sumtxt
m5=$(md5sum $fnewreadmetxt | cut -f1 -d' ')
echo "${m5}  ./README.txt" >> $fmd5sumtxt

# new things we will be adding to the new ISO
m5=$(md5sum $farchivestar | cut -f1 -d' ')
echo "${m5}  ./archives.tar" >> $fmd5sumtxt
m5=$(md5sum $fcopyefigrubhook | cut -f1 -d' ')
echo "${m5}  ./copy_to_boot_efi2.j2" >> $fmd5sumtxt
m5=$(md5sum $fwallpaper | cut -f1 -d' ')
echo "${m5}  ./sangoma-wallpaper-for-grub.png" >> $fmd5sumtxt
m5=$(md5sum $fsngreadmewarning | cut -f1 -d' ')
echo "${m5}  ./WARNING.txt" >> $fmd5sumtxt
m5=$(md5sum $feula | cut -f1 -d' ')
echo "${m5}  ./EULA.txt" >> $fmd5sumtxt
m5=$(md5sum $fpreseedng | cut -f1 -d' ')
echo "${m5}  ./preseed_ng.cfg" >> $fmd5sumtxt
m5=$(md5sum $fpreseedcrypto | cut -f1 -d' ')
echo "${m5}  ./preseed_crypto.cfg" >> $fmd5sumtxt
m5=$(md5sum $fpreseedraid | cut -f1 -d' ')
echo "${m5}  ./preseed_raid.cfg" >> $fmd5sumtxt
m5=$(md5sum $fpreseedraiddisks | cut -f1 -d' ')
echo "${m5}  ./preseed_raid_disk_s.cfg" >> $fmd5sumtxt
m5=$(md5sum $fpreseedraiddiskv | cut -f1 -d' ')
echo "${m5}  ./preseed_raid_disk_v.cfg" >> $fmd5sumtxt
m5=$(md5sum $fpreseedraiddiskxv | cut -f1 -d' ')
echo "${m5}  ./preseed_raid_disk_xv.cfg" >> $fmd5sumtxt
m5=$(md5sum $fpreseednonraiddisks | cut -f1 -d' ')
echo "${m5}  ./preseed_nonraid_disk_s.cfg" >> $fmd5sumtxt
m5=$(md5sum $fpreseednonraiddiskv | cut -f1 -d' ')
echo "${m5}  ./preseed_nonraid_disk_v.cfg" >> $fmd5sumtxt
m5=$(md5sum $fpreseednonraiddiskxv | cut -f1 -d' ')
echo "${m5}  ./preseed_nonraid_disk_xv.cfg" >> $fmd5sumtxt
m5=$(md5sum $fcmdpreseedchooser | cut -f1 -d' ')
echo "${m5}  ./sng_preseed_chooser" >> $fmd5sumtxt
m5=$(md5sum $fcmdearlypartman | cut -f1 -d' ')
echo "${m5}  ./sng_partman_early_command" >> $fmd5sumtxt
m5=$(md5sum $fcmdearly | cut -f1 -d' ')
echo "${m5}  ./sng_early_command" >> $fmd5sumtxt
m5=$(md5sum $fcmdlate | cut -f1 -d' ')
echo "${m5}  ./sng_late_command" >> $fmd5sumtxt
m5=$(md5sum $fcmdboot | cut -f1 -d' ')
echo "${m5}  ./sng_boot_command" >> $fmd5sumtxt
m5=$(md5sum $frecipes | cut -f1 -d' ')
echo "${m5}  ./sng_partman_recipes.bnf" >> $fmd5sumtxt
m5=$(md5sum $fpubkey | cut -f1 -d' ')
echo "${m5}  ./freepbx-sangoma-apt-repo-pubkey.asc" >> $fmd5sumtxt

# generate the new ISOs
m5=$(md5sum $fpreseed1 | cut -f1 -d' ')
chmod +w $fmd5sumtxt
echo "${m5}  ./preseed.cfg" >> $fmd5sumtxt
chmod -w $fmd5sumtxt
xorriso \
	-indev \
		$fn_iso_input \
	-outdev \
		${fn_iso_output} \
	-map \
		$dtmp/$dcdrom/$str_script_name \
		$str_script_name \
	-map \
		$farchivestar \
		archives.tar \
	-map \
		$feula \
		EULA.txt \
	-map \
		$fnewreadmetxt \
		README.txt \
	-map \
		$fsngreadmewarning \
		WARNING.txt \
	-map \
		$fpreseed1 \
		preseed.cfg \
	-map \
		$fpreseedng \
		preseed_ng.cfg \
	-map \
		$fpreseedcrypto \
		preseed_crypto.cfg \
	-map \
		$fpreseedraid \
		preseed_raid.cfg \
	-map \
		$fpreseedraiddisks \
		preseed_raid_disk_s.cfg \
	-map \
		$fpreseedraiddiskv \
		preseed_raid_disk_v.cfg \
	-map \
		$fpreseedraiddiskxv \
		preseed_raid_disk_xv.cfg \
	-map \
		$fpreseednonraiddisks \
		preseed_nonraid_disk_s.cfg \
	-map \
		$fpreseednonraiddiskv \
		preseed_nonraid_disk_v.cfg \
	-map \
		$fpreseednonraiddiskxv \
		preseed_nonraid_disk_xv.cfg \
	-map \
		$fcmdearlypartman \
		sng_partman_early_command \
	-map \
		$fcmdearly \
		sng_early_command \
	-map \
		$fcmdlate \
		sng_late_command \
	-map \
		$fcmdboot \
		sng_boot_command \
	-map \
		$fcmdpreseedchooser \
		sng_preseed_chooser \
	-map \
		$frecipes \
		sng_partman_recipes.bnf \
	-map \
		$fpubkey \
		freepbx-sangoma-apt-repo-pubkey.asc \
	-map \
		$fwallpaper \
		sangoma-wallpaper-for-grub.png \
	-map \
		$fwallpaper \
		isolinux/splash.png \
	-map \
		$fcopyefigrubhook \
		copy_to_boot_efi2.j2 \
	-map \
		$fmd5sumtxt \
		md5sum.txt \
	-map \
		$fisolinuxcfg \
		isolinux/isolinux.cfg \
	-map \
		$fisolinuxtxt \
		isolinux/txt.cfg \
	-map \
		$fisolinuxmenu \
		isolinux/menu.cfg \
	-map \
		$fisolinuxstd \
		isolinux/stdmenu.cfg \
	-map \
		$fgrubcfg \
		boot/grub/grub.cfg \
	-map \
		$fgrubtheme1 \
		boot/grub/theme/1 \
	-map \
		$fdiskinfo \
		.disk/info \
	-rm_r \
		/boot/grub/theme/1-1 \
		/boot/grub/theme/1-1-1 \
		/boot/grub/theme/1-2 \
		/boot/grub/theme/1-2-1 \
		/boot/grub/theme/dark-1 \
		/boot/grub/theme/dark-1-1 \
		/boot/grub/theme/dark-1-1-1 \
		/boot/grub/theme/dark-1-2 \
		/boot/grub/theme/dark-1-2-1 \
		/css/debinstall.css \
		/css/debinstall-print.css \
		/doc \
		/isolinux/f1.txt \
		/isolinux/f2.txt \
		/isolinux/f9.txt \
		/isolinux/f10.txt \
		/pics \
		/pool/main/g/gnome* \
		/pool/main/g/gtk* \
		/pool/main/k/kde* \
		/pool/main/m/mate* \
		/README.html \
		/README.mirrors.html \
		/README.mirrors.txt \
		-- \
	-volid \
		${str_our_short_cap_name}_${str_script_version_underscore}_${str_spice}${str_diy} \
	-md5 \
		all \
	-boot_image \
		any \
		replay \
	-padding \
		included \
	-compliance \
		no_emul_toc

echo "${str_header}"

if [ "${str_spice}" = "INT" ]; then
	echo "This is an internal image and should not be used externally ie. NO PUBLIC DISTRIBUTION"
else
	echo "This is a public release and should not be used internally (except for testing)."
fi

# copy over the netboot initrd if provided
if [ -z "${fn_netboot_initrd}" ]; then
	echo "No initrd.gz specified for netbooting over PXE, so a tar ball was *not* generated.
Burn the ISO to a thumb drive and try it out :-)
For example: dd if=${fn_iso_output} of=/dev/path/to/drive bs=4k status=progress"
else
	echo "Generating PXE TAR... if archives.tar is inside then it might take a few seconds..."
	cp ${fn_netboot_initrd} $dtmp/$dcdrom/initrd.gz
	cp $dtmp/$dcdrom/preseed1.cfg $dtmp/$dcdrom/sample.seed
	pxetar=${str_iso_out_base}-${str_spice}-PXE.tar
	cblrdme=${str_iso_out_base}-${str_spice}-COBBLER-README.txt
	tar cf ${pxetar} -C $dtmp $dcdrom
	echo "Output TAR: ${pxetar}"
	echo "Output cobbler instructions: ${cblrdme}"
	cat << EOFCBLR > $cblrdme
# Copy over the ISO and the TAR to the cobbler PXE boot server. Then run there AS ROOT:

export COBBLER_SERVER=192.0.2.42 (or whatever your TFTP / PXE boot server IPv4 is)
export TFTP_DIR=/var/lib/tftpboot
# on CentOS 7 / SNG7 this may be:
# export TFTP_DIR=/tftpboot

cd \${TFTP_DIR}
tar xf ~/${str_iso_out_base}-${str_spice}-PXE.tar
mkdir -p /mnt/${str_iso_out_base}
mount -t iso9660 -o loop,ro ~/${fn_iso_output} /mnt/${str_iso_out_base}
cobbler import --name=${str_iso_out_base} --arch=x86_64 --path=/mnt/${str_iso_out_base}
umount /mnt/${str_iso_out_base}
cobbler distro edit --name=${str_iso_out_base}-x86_64 --initrd=\${TFTP_DIR}/$dcdrom/initrd.gz
# FC41, Rocky9
cobbler profile edit --name=${str_iso_out_base}-x86_64 --autoinstall='' --kernel-options=\"locale=en_US language=en country=US keymap=us dmraid=false url=tftp://\${COBBLER_SERVER}/${dcdrom}/./preseed1.cfg tftphost=\${COBBLER_SERVER}\ console=tty0 console=ttyS0,115200n8\"
# SNG7
cobbler profile edit --name=${str_iso_out_base}-x86_64 --kickstart='' --kopts=\"locale=en_US language=en country=US keymap=us dmraid=false url=tftp://\${COBBLER_SERVER}/${dcdrom}/./preseed1.cfg tftphost=\${COBBLER_SERVER} console=tty0 console=ttyS0,115200n8\"
# remove gtk and xen options
cobbler profile remove --name=${str_iso_out_base}-gtk-x86_64
cobbler profile remove --name=${str_iso_out_base}-xen-x86_64
cobbler distro remove --name=${str_iso_out_base}-gtk-x86_64
cobbler distro remove --name=${str_iso_out_base}-xen-x86_64
cobbler sync
EOFCBLR

fi

if [ -n "${str_locked_kernel}" ]; then
	echo "Locked to kernel ${str_locked_kernel} to help DAHDI"
	echo "Please make sure upstream DAHDI is working on this kernel"
fi

echo -n "md5sum:" && md5sum ${fn_iso_output}
echo -n "sha256sum:" && sha256sum ${fn_iso_output}
echo -n "sha512sum:" && sha512sum ${fn_iso_output}
